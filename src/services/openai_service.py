import os
from openai import OpenAI
from typing import Dict, Any
import logging
import json

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class OpenAIService:
    """Servi√ßo para integra√ß√£o com OpenAI"""
    
    def __init__(self):
        # Configurar cliente OpenAI
        self.client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        
    def interpretar_mensagem(self, mensagem: str) -> Dict[str, Any]:
        """
        Interpreta a mensagem do usu√°rio usando OpenAI
        
        Args:
            mensagem (str): Mensagem do usu√°rio
            
        Returns:
            Dict: Resultado da interpreta√ß√£o com campos:
                - cpf: CPF encontrado ou None
                - novo_usuario: True se for sauda√ß√£o/primeiro contato, False caso contr√°rio
                - solicitar_cpf: True se precisa solicitar CPF
                - mensagem_resposta: Mensagem para enviar ao usu√°rio
        """
        try:
            # Prompt para a OpenAI
            prompt = f"""Como uma Corretora de Loca√ß√£o, analise a mensagem do cliente:

            Mensagem: {mensagem}

            1. Identifique se √© uma sauda√ß√£o ou primeiro contato
            2. Procure por um CPF na mensagem
            3. Determine a pr√≥xima a√ß√£o apropriada

            Retorne apenas um objeto JSON com:
            - cpf: n√∫mero do CPF se encontrado (apenas n√∫meros), ou null se n√£o encontrado
            - novo_usuario: true se for sauda√ß√£o/primeiro contato, false caso contr√°rio
            - solicitar_cpf: true se n√£o encontrou CPF ou false se encontrou
            - mensagem_resposta: mensagem apropriada para o cliente:
              - Se for novo usu√°rio: enviar primeira mensagem padr√£o
              - Se encontrou CPF: apenas confirmar "Ol√°! Confirmo o recebimento do CPF [CPF formatado]."
              - Se n√£o encontrou CPF: solicitar gentilmente
            """
            
            # Fazer chamada para OpenAI com nova sintaxe
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system", 
                        "content": """Voc√™ √© uma Corretora de Loca√ß√£o profissional e eficiente.
                        Seu objetivo √© identificar informa√ß√µes importantes para o processo de loca√ß√£o.
                        Mantenha um tom profissional e direto.
                        Para novos usu√°rios, apresente-se como Bia e solicite o CPF.
                        Para confirma√ß√£o de CPF, apenas confirme o recebimento sem perguntas adicionais.
                        """
                    },
                    {"role": "user", "content": prompt}
                ],
                temperature=0,
                max_tokens=200
            )
            
            # Extrair resposta
            resultado = json.loads(response.choices[0].message.content)
            logger.info("ü§ñ Interpreta√ß√£o conclu√≠da")
            
            return resultado
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao interpretar mensagem: {str(e)}")
            return {
                "cpf": None,
                "novo_usuario": False,
                "solicitar_cpf": True,
                "mensagem_resposta": "Por favor, me envie seu CPF (apenas n√∫meros) para continuarmos o atendimento."
            } 