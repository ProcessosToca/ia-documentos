import os
from openai import OpenAI
from typing import Dict, Any, List
import logging
import json

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class OpenAIService:
    """Servi√ßo para integra√ß√£o com OpenAI"""
    
    def __init__(self):
        # Configurar cliente OpenAI
        self.client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        
    def interpretar_mensagem(self, mensagem: str) -> Dict[str, Any]:
        """
        Interpreta a mensagem do usu√°rio usando OpenAI
        
        Args:
            mensagem (str): Mensagem do usu√°rio
            
        Returns:
            Dict: Resultado da interpreta√ß√£o com campos:
                - cpf: CPF encontrado ou None
                - novo_usuario: True se for sauda√ß√£o/primeiro contato, False caso contr√°rio
                - solicitar_cpf: True se precisa solicitar CPF
                - mensagem_resposta: Mensagem para enviar ao usu√°rio
        """
        try:
            # Prompt para a OpenAI
            prompt = f"""Como uma Corretora de Loca√ß√£o, analise a mensagem do cliente:

            Mensagem: {mensagem}

            1. Identifique se √© uma sauda√ß√£o ou primeiro contato
            2. Procure por um CPF na mensagem
            3. Determine a pr√≥xima a√ß√£o apropriada

            Retorne apenas um objeto JSON com:
            - cpf: n√∫mero do CPF se encontrado (apenas n√∫meros), ou null se n√£o encontrado
            - novo_usuario: true se for sauda√ß√£o/primeiro contato, false caso contr√°rio
            - solicitar_cpf: true se n√£o encontrou CPF ou false se encontrou
            - mensagem_resposta: mensagem apropriada para o cliente:
              - Se for novo usu√°rio: enviar primeira mensagem padr√£o
              - Se encontrou CPF: apenas confirmar "Ol√°! Confirmo o recebimento do CPF [CPF formatado]."
              - Se n√£o encontrou CPF: solicitar gentilmente
            """
            
            # Fazer chamada para OpenAI com nova sintaxe
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system", 
                        "content": """Voc√™ √© uma Corretora de Loca√ß√£o profissional e eficiente.
                        Seu objetivo √© identificar informa√ß√µes importantes para o processo de loca√ß√£o.
                        Mantenha um tom profissional e direto.
                        Para novos usu√°rios, apresente-se como Bia e solicite o CPF.
                        Para confirma√ß√£o de CPF, apenas confirme o recebimento sem perguntas adicionais.
                        """
                    },
                    {"role": "user", "content": prompt}
                ],
                temperature=0,
                max_tokens=200
            )
            
            # Extrair resposta
            resultado = json.loads(response.choices[0].message.content)
            logger.info("ü§ñ Interpreta√ß√£o conclu√≠da")
            
            return resultado
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao interpretar mensagem: {str(e)}")
            return {
                "cpf": None,
                "novo_usuario": False,
                "solicitar_cpf": True,
                "mensagem_resposta": "Por favor, me envie seu CPF (apenas n√∫meros) para continuarmos o atendimento."
            } 

    def analisar_conversas_com_gpt(self, conversas: List[dict], documentos_analise: dict) -> dict:
        """
        Analisa o hist√≥rico de conversas e documentos de uma negocia√ß√£o usando GPT-4 para gerar uma resposta contextual.
        
        Args:
            conversas (List[dict]): Lista de conversas anteriores, cada uma com:
                - sender: 'ia' ou 'user'
                - message: texto da mensagem
                - timestamp: quando foi enviada
            documentos_analise (dict): An√°lise dos documentos da negocia√ß√£o com:
                - total_obrigatorios: n√∫mero total de documentos necess√°rios
                - total_recebidos: n√∫mero de documentos j√° recebidos
                - total_faltantes: n√∫mero de documentos pendentes
                - documentos_faltantes: lista de documentos que faltam
                - progresso_percentual: % de conclus√£o
                
        Returns:
            dict: Resultado da an√°lise com:
                - resumo: Resumo do contexto atual da conversa
                - proxima_mensagem: Texto sugerido para pr√≥xima mensagem
                - contexto: Situa√ß√£o atual (ex: "aguardando_documentos", "documentos_completos")
                
        Exemplo:
            >>> conversas = [
                    {"sender": "user", "message": "Bom dia, enviei o RG"},
                    {"sender": "ia", "message": "Recebi! Falta comprovante de renda"}
                ]
            >>> docs = {
                    "total_obrigatorios": 3,
                    "total_recebidos": 1,
                    "documentos_faltantes": [{"name": "Comprovante de Renda"}]
                }
            >>> resultado = analisar_conversas_com_gpt(conversas, docs)
            >>> print(resultado["proxima_mensagem"])
            "Por favor, envie seu comprovante de renda para continuarmos."
        """
        try:
            # Preparar hist√≥rico de conversas para an√°lise
            historico = []
            for conversa in conversas:
                papel = "assistant" if conversa['sender'] == 'ia' else "user"
                historico.append(f"{papel.upper()}: {conversa['message']}")
            
            # Valida√ß√£o e acesso seguro aos dados de documentos
            total_obrigatorios = documentos_analise.get('total_obrigatorios', 0)
            total_recebidos = documentos_analise.get('total_recebidos', 0)
            total_faltantes = documentos_analise.get('total_faltantes', 0)
            progresso_percentual = documentos_analise.get('progresso_percentual', 0.0)
            documentos_faltantes = documentos_analise.get('documentos_faltantes', [])
            documentos_recebidos = documentos_analise.get('documentos_recebidos', [])
            
            logger.info(f"üìä Analisando: {total_recebidos}/{total_obrigatorios} documentos ({progresso_percentual:.1f}%)")
            
            # Preparar lista de documentos faltantes de forma segura
            docs_faltantes_lista = []
            for doc in documentos_faltantes:
                nome = doc.get('name', 'Documento n√£o identificado')
                descricao = doc.get('description', 'Sem descri√ß√£o')
                docs_faltantes_lista.append(f"üìÑ **{nome}** - {descricao}")
            
            # Preparar lista de documentos recebidos
            docs_recebidos_lista = []
            for doc in documentos_recebidos:
                nome_tipo = doc.get('ai_document_types', {}).get('name', 'Documento')
                docs_recebidos_lista.append(f"‚úÖ {nome_tipo}")
            
            # Preparar informa√ß√µes sobre documentos
            docs_info = f"""
            DOCUMENTOS OBRIGAT√ìRIOS: {total_obrigatorios}
            DOCUMENTOS RECEBIDOS: {total_recebidos}
            DOCUMENTOS FALTANTES: {total_faltantes}
            PROGRESSO: {progresso_percentual:.1f}%
            
            DOCUMENTOS J√Å RECEBIDOS:
            {chr(10).join(docs_recebidos_lista) if docs_recebidos_lista else "Nenhum documento recebido ainda"}
            
            DOCUMENTOS FALTANTES:
            {chr(10).join(docs_faltantes_lista) if docs_faltantes_lista else "Nenhum documento faltante"}
            """
            
            # Determinar contexto atual baseado nos dados
            if total_obrigatorios == 0:
                contexto_atual = "sem_documentos_definidos"
            elif total_faltantes == 0 and total_recebidos > 0:
                contexto_atual = "documentos_completos"
            elif total_recebidos > 0:
                contexto_atual = "aguardando_documentos"
            else:
                contexto_atual = "iniciando_coleta"
            
            # Prompt para GPT-4
            prompt = f"""
            Voc√™ √© um assistente IA especializado em negocia√ß√µes imobili√°rias. Analise o hist√≥rico de conversas abaixo e as informa√ß√µes sobre documentos para:

            1. RESUMIR onde parou a conversa
            2. IDENTIFICAR o que o cliente precisa fazer agora
            3. SUGERIR a pr√≥xima mensagem apropriada

            HIST√ìRICO DE CONVERSAS ({len(historico)} mensagens):
            {chr(10).join(historico) if historico else "Nenhuma conversa anterior"}

            SITUA√á√ÉO DOS DOCUMENTOS:
            {docs_info}

            CONTEXTO ATUAL: {contexto_atual}

            INSTRU√á√ïES:
            - Seja cordial e profissional
            - Se faltam documentos, mencione ESPECIFICAMENTE quais documentos est√£o faltando com suas descri√ß√µes
                        - Use formata√ß√£o com quebras de linha para melhor legibilidade no WhatsApp:
              "Recebi seu RG ‚úÖ
              
              Ainda preciso de:
              üìÑ *Comprovante de Renda* - √∫ltimos 3 holerites
              üè† *Comprovante de Resid√™ncia* - conta de luz/√°gua  
              üìã *Certid√£o de Nascimento/Casamento* - estado civil
              
              Me pe√ßa para enviar documentos que inicio a sequ√™ncia de envios com voc√™! üìÑ"
            - Se todos os documentos foram enviados, informe o pr√≥ximo passo
            - Mantenha o tom conversacional e amig√°vel
            - Use emojis para deixar mais amig√°vel
            - Use quebras de linha para separar as informa√ß√µes
            - Se n√£o h√° conversas anteriores, seja acolhedor e explique o processo

            Responda em JSON com:
            - "resumo": Resumo do contexto atual
            - "proxima_mensagem": Mensagem para enviar ao cliente
            - "contexto": Situa√ß√£o atual (ex: "aguardando_documentos", "documentos_completos", "iniciando_conversa")
            """
            
            # Fazer chamada para GPT-4
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "Voc√™ √© um assistente especializado em an√°lise de conversas imobili√°rias. Responda sempre em JSON v√°lido."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=500
            )
            
            # Processar resposta
            resposta_texto = response.choices[0].message.content.strip()
            
            # Tentar fazer parse do JSON
            try:
                resultado = json.loads(resposta_texto)
                logger.info(f"‚úÖ An√°lise GPT-4 conclu√≠da com sucesso")
                return resultado
            except json.JSONDecodeError:
                logger.warning(f"‚ö†Ô∏è Resposta GPT-4 n√£o √© JSON v√°lido: {resposta_texto[:200]}...")
                
                # Tentar extrair mensagem √∫til do texto mal formado
                mensagem_limpa = resposta_texto
                
                # Se cont√©m estrutura JSON parcial, tentar extrair a mensagem
                if '"proxima_mensagem"' in resposta_texto:
                    try:
                        import re
                        # Buscar o conte√∫do da proxima_mensagem
                        match = re.search(r'"proxima_mensagem":\s*"([^"]*)"', resposta_texto)
                        if match:
                            mensagem_limpa = match.group(1)
                            logger.info(f"‚úÖ Mensagem extra√≠da do JSON parcial")
                        else:
                            # Fallback: usar texto ap√≥s dois pontos
                            if ':"' in resposta_texto:
                                mensagem_limpa = resposta_texto.split(':"')[1].split('"')[0]
                    except Exception as e_regex:
                        logger.warning(f"‚ö†Ô∏è Erro ao extrair mensagem: {e_regex}")
                        # Usar mensagem padr√£o se falhar
                        mensagem_limpa = "Analisei sua situa√ß√£o e vou continuar te ajudando com os pr√≥ximos passos!"
                else:
                    # Se n√£o tem estrutura JSON, usar o texto direto mas limitar tamanho
                    mensagem_limpa = resposta_texto[:200] if len(resposta_texto) > 200 else resposta_texto
                    # Remover caracteres JSON comuns que possam aparecer
                    mensagem_limpa = mensagem_limpa.replace('{"', '').replace('"}', '').replace('\\n', '\n')
                
                return {
                    "resumo": "An√°lise conclu√≠da com texto n√£o estruturado",
                    "proxima_mensagem": mensagem_limpa,
                    "contexto": "analise_texto_livre"
                }
            
        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise GPT-4: {str(e)}")
            return {
                "resumo": f"Erro na an√°lise: {str(e)}",
                "proxima_mensagem": "Vou analisar sua situa√ß√£o e retorno em breve. Obrigado pela paci√™ncia!",
                "contexto": "erro_analise"
            } 