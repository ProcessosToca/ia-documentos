# Menu Service - WhatsApp
# Arquivo reservado para implementa√ß√£o futura dos menus interativos 

import os
import requests
import logging
from typing import Dict, Any

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MenuServiceWhatsApp:
    """
    Servi√ßo para enviar menus interativos via W-API WhatsApp
    """
    
    def __init__(self):
        self.api_host = os.getenv('W_API_HOST', 'https://api.w-api.app')
        self.instance_id = os.getenv('W_API_INSTANCE_ID')
        self.token = os.getenv('W_API_TOKEN')
        
        self.headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.token}'
        }
        
        # Obter nome da empresa do .env com fallback
        self.company_name = os.getenv('COMPANY_NAME', 'Loca√ß√£o Online')
        
        logger.info("üìã MenuServiceWhatsApp inicializado")

    def processar_resposta_menu(self, row_id: str, usuario_id: str, webhook_data: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Fun√ß√£o gen√©rica para processar respostas de QUALQUER menu
        
        Args:
            row_id (str): ID da op√ß√£o selecionada pelo usu√°rio (ex: "concordo_dados")
            usuario_id (str): Telefone/ID do usu√°rio que respondeu
            webhook_data (Dict, optional): Dados completos do webhook para contexto
            
        Returns:
            Dict: Resultado do processamento com pr√≥xima a√ß√£o
        """
        try:
            logger.info(f"üìã Processando resposta de menu: {row_id} do usu√°rio {usuario_id}")
            
            # Dicion√°rio com todas as a√ß√µes poss√≠veis de todos os menus
            acoes_menu = {
                # MENU DE CONCORD√ÇNCIA LGPD
                "concordo_dados": {
                    "acao": "registrar_concordancia_dados",
                    "mensagem": "‚úÖ Concord√¢ncia registrada! Seus dados ser√£o tratados conforme nossa pol√≠tica de privacidade.",
                    "proximo_passo": "aguardar_concordancia_documentos"
                },
                "politica_privacidade": {
                    "acao": "enviar_politica",
                    "mensagem": "üìÑ Aqui est√° nossa pol√≠tica de privacidade...",
                    "proximo_passo": "aguardar_concordancia"
                },
                "concordo_documentos": {
                    "acao": "registrar_concordancia_documentos", 
                    "mensagem": "‚úÖ Autoriza√ß√£o para documentos registrada!",
                    "proximo_passo": "aguardar_concordancia_total"
                },
                "lista_documentos": {
                    "acao": "mostrar_lista_documentos",
                    "mensagem": "üìã Documentos necess√°rios:\n‚Ä¢ RG ou CNH\n‚Ä¢ Comprovante de renda\n‚Ä¢ Comprovante de resid√™ncia\n‚Ä¢ Certid√£o de nascimento/casamento (opcional)",
                    "proximo_passo": "aguardar_decisao"
                },
                "concordo_tudo": {
                    "acao": "iniciar_processo_completo",
                    "mensagem": "üéâ Perfeito! Vamos iniciar seu processo de loca√ß√£o sem fiador. Me pe√ßa para enviar documentos que inicio a sequ√™ncia de envios com voc√™! üìÑ",
                    "proximo_passo": "aguardar_solicitacao_documentos"
                },
                "mais_informacoes": {
                    "acao": "transferir_atendente",
                    "mensagem": "üë• Vou conectar voc√™ com um de nossos atendentes para esclarecer suas d√∫vidas.",
                    "proximo_passo": "aguardar_atendente"
                },
                
                # MENU DE OP√á√ïES DE ATENDIMENTO
                "usar_ia_duvidas": {
                    "acao": "ativar_ia_especializada",
                    "mensagem": "ü§ñ IA Especializada Ativada! Pode me perguntar",''
                    "proximo_passo": "aguardando_duvida_locacao"
                },
                "iniciar_fechamento": {
                    "acao": "coletar_nome_cliente",
                    "mensagem": "üìù Vamos coletar dados do cliente para iniciar o fechamento.\n\n*Por favor, informe o nome completo do cliente:*",
                    "proximo_passo": "aguardando_nome_cliente"
                },
                
                # MENU DE CONFIRMA√á√ÉO SIMPLES
                "confirmar_sim": {
                    "acao": "confirmar_acao",
                    "mensagem": "‚úÖ Confirmado! Prosseguindo com a a√ß√£o.",
                    "proximo_passo": "acao_confirmada"
                },
                "confirmar_nao": {
                    "acao": "cancelar_acao", 
                    "mensagem": "‚ùå A√ß√£o cancelada.",
                    "proximo_passo": "acao_cancelada"
                },
                
                # MENU DE CONFIRMA√á√ÉO - ATENDIMENTO CLIENTE
                "confirmar_atendimento_sim": {
                    "acao": "iniciar_atendimento_cliente",
                    "mensagem": "‚úÖ Iniciando contato com o cliente...",
                    "proximo_passo": "contato_cliente_iniciado"
                },
                "confirmar_atendimento_nao": {
                    "acao": "encerrar_atendimento_corretor",
                    "mensagem": "Obrigado pelo retorno, estamos encerrando seu atendimento.",
                    "proximo_passo": "atendimento_encerrado"
                },
                
                # MENU DE CONFIRMA√á√ÉO DO CLIENTE
                "cliente_aceita_atendimento": {
                    "acao": "solicitar_cpf_cliente",
                    "mensagem": "‚úÖ Perfeito! Para prosseguir, preciso do seu CPF.",
                    "proximo_passo": "aguardando_cpf_cliente"
                },
                "cliente_recusa_atendimento": {
                    "acao": "encerrar_atendimento_cliente",
                    "mensagem": "Entendido! Qualquer d√∫vida, estaremos √† disposi√ß√£o.",
                    "proximo_passo": "atendimento_cliente_encerrado"
                },
                
                # MENU DE CONFIRMA√á√ÉO DE ENDERE√áO
                "confirmar_endereco_sim": {
                    "acao": "confirmar_endereco",
                    "mensagem": "‚úÖ Endere√ßo confirmado! Agora preciso do n√∫mero da resid√™ncia:",
                    "proximo_passo": "aguardando_numero"
                },
                "confirmar_endereco_nao": {
                    "acao": "corrigir_endereco",
                    "mensagem": "‚ùå Vamos corrigir o endere√ßo. Por favor, digite o CEP novamente:",
                    "proximo_passo": "aguardando_cep"
                },
                
                # MENU DE CONFIRMA√á√ÉO DE DOCUMENTOS
                "confirmar_documentos_sim": {
                    "acao": "iniciar_coleta_documentos",
                    "mensagem": "‚úÖ Perfeito! Vamos come√ßar a coleta de documentos. Vou te encaminhar a lista de Documentos necess√°rios .",
                    "proximo_passo": "aguardando_solicitacao_documentos"
                },
                "confirmar_documentos_nao": {
                    "acao": "encerrar_processo_documentos",
                    "mensagem": "Entendido! Qualquer d√∫vida sobre documentos, estaremos √† disposi√ß√£o. Obrigado pelo contato! üëã",
                    "proximo_passo": "processo_encerrado"
                },
                
                # ESPA√áO PARA FUTUROS MENUS
                # "menu_documentos_xxx": {...},
                # "menu_status_xxx": {...},
                # "menu_contato_xxx": {...},
            }
            
            # Verificar se o row_id existe no mapeamento
            if row_id in acoes_menu:
                resposta = acoes_menu[row_id]
                
                logger.info(f"‚úÖ A√ß√£o encontrada: {resposta['acao']}")
                
                return {
                    "sucesso": True,
                    "row_id": row_id,
                    "acao": resposta["acao"],
                    "mensagem_resposta": resposta["mensagem"],
                    "proximo_passo": resposta["proximo_passo"],
                    "usuario_id": usuario_id
                }
            else:
                logger.warning(f"‚ö†Ô∏è Row ID n√£o reconhecido: {row_id}")
                return {
                    "sucesso": False,
                    "erro": f"Op√ß√£o n√£o reconhecida: {row_id}",
                    "mensagem_resposta": "Desculpe, n√£o entendi sua escolha. Pode tentar novamente?",
                    "row_id": row_id,
                    "usuario_id": usuario_id
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar resposta do menu: {str(e)}")
            return {
                "sucesso": False,
                "erro": str(e),
                "mensagem_resposta": "Tive um problema ao processar sua escolha. Pode tentar novamente?",
                "row_id": row_id,
                "usuario_id": usuario_id
            }

    # Menu de LGPD
    def enviar_menu_concordancia_dados(self, numero_telefone: str) -> Dict[str, Any]:
        """
        Envia menu de concord√¢ncia com divulga√ß√£o de dados e documentos
        
        Args:
            numero_telefone (str): N√∫mero do telefone do destinat√°rio
            
        Returns:
            Dict: Resposta da API
        """
        try:
            url = f"{self.api_host}/v1/message/send-list"
            
            params = {
                "instanceId": self.instance_id
            }
            
            payload = {
                "phone": numero_telefone,
                "title": "üìã Concord√¢ncia - Dados e Documentos",
                "description": "Para prosseguir com sua loca√ß√£o, precisamos da sua concord√¢ncia sobre o tratamento de dados pessoais e envio de documentos.",
                "buttonText": "Ver Op√ß√µes",
                "footerText": f"{self.company_name} - Loca√ß√£o Sem Fiador",
                "sections": [
                    {
                        "title": "‚úÖ Concord√¢ncia Completa",
                        "rows": [
                            {
                                "title": "Concordo com tudo e prosseguir",
                                "description": "Aceito todos os termos e quero iniciar o processo",
                                "rowId": "concordo_tudo"
                            },
                            {
                                "title": "Preciso de mais informa√ß√µes",
                                "description": "Falar com atendente antes de concordar",
                                "rowId": "mais_informacoes"
                            }
                        ]
                    },
                    {
                        "title": "üìÑ Dados Pessoais",
                        "rows": [
                            {
                                "title": "Concordo com tratamento de dados",
                                "description": "Autorizo o uso dos meus dados para processo de loca√ß√£o",
                                "rowId": "concordo_dados"
                            },
                            {
                                "title": "Ler pol√≠tica de privacidade",
                                "description": "Visualizar termos de privacidade completos",
                                "rowId": "politica_privacidade"
                            }
                        ]
                    },
                    {
                        "title": "üìÇ Documentos",
                        "rows": [
                            {
                                "title": "Concordo em enviar documentos",
                                "description": "Autorizo envio de RG, CPF, comprovantes necess√°rios",
                                "rowId": "concordo_documentos"
                            },
                            {
                                "title": "Ver lista de documentos",
                                "description": "Consultar quais documentos ser√£o solicitados",
                                "rowId": "lista_documentos"
                            }
                        ]
                    }
                ],
                "delayMessage": 2
            }
            
            response = requests.post(url, json=payload, headers=self.headers, params=params)
            
            if response.status_code == 200:
                logger.info("‚úÖ Menu de concord√¢ncia enviado com sucesso")
                return {
                    "sucesso": True,
                    "dados": response.json(),
                    "status_code": response.status_code
                }
            else:
                logger.error(f"‚ùå Erro ao enviar menu: {response.status_code}")
                return {
                    "sucesso": False,
                    "erro": response.text,
                    "status_code": response.status_code
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar menu de concord√¢ncia: {str(e)}")
            return {
                "sucesso": False,
                "erro": str(e),
                "status_code": 500
            }

    # Menu de Op√ß√µes de Atendimento
    def enviar_menu_opcoes_atendimento(self, numero_telefone: str) -> Dict[str, Any]:
        """
        Envia menu com op√ß√µes de atendimento: IA para d√∫vidas ou iniciar fechamento
        
        Args:
            numero_telefone (str): N√∫mero do telefone do destinat√°rio
            
        Returns:
            Dict: Resposta da API
        """
        try:
            url = f"{self.api_host}/v1/message/send-list"
            
            params = {
                "instanceId": self.instance_id
            }
            
            payload = {
                "phone": numero_telefone,
                "title": " Op√ß√µes de Atendimento",
                "description": "Como posso ajudar voc√™ hoje? Escolha uma das op√ß√µes abaixo:",
                "buttonText": "Ver Op√ß√µes",
                "footerText": f"{self.company_name} - Loca√ß√£o Sem Fiador",
                "sections": [
                    {
                        "title": "üîß Atendimento",
                        "rows": [
                            {
                                "title": "ü§ñ Usar IA para D√∫vidas",
                                "description": "Converse comigo sobre loca√ß√£o, documentos e processos",
                                "rowId": "usar_ia_duvidas"
                            },
                            {
                                "title": "üè† Iniciar Fechamento Loca√ß√£o",
                                "description": "Dar in√≠cio ao processo de fechamento da loca√ß√£o",
                                "rowId": "iniciar_fechamento"
                            }
                        ]
                    }
                ],
                "delayMessage": 2
            }
            
            response = requests.post(url, json=payload, headers=self.headers, params=params)
            
            if response.status_code == 200:
                logger.info("‚úÖ Menu de op√ß√µes de atendimento enviado com sucesso")
                return {
                    "sucesso": True,
                    "dados": response.json(),
                    "status_code": response.status_code
                }
            else:
                logger.error(f"‚ùå Erro ao enviar menu: {response.status_code}")
                return {
                    "sucesso": False,
                    "erro": response.text,
                    "status_code": response.status_code
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar menu de op√ß√µes de atendimento: {str(e)}")
            return {
                "sucesso": False,
                "erro": str(e),
                "status_code": 500
            }

    # Menu de Confirma√ß√£o Simples
    def enviar_menu_confirmacao(self, numero_telefone: str, titulo: str = "Confirma√ß√£o", pergunta: str = "Deseja prosseguir?") -> Dict[str, Any]:
        """
        Envia menu de confirma√ß√£o simples com apenas "Sim" e "N√£o"
        
        Args:
            numero_telefone (str): N√∫mero do telefone do destinat√°rio
            titulo (str): T√≠tulo do menu de confirma√ß√£o
            pergunta (str): Pergunta a ser feita ao usu√°rio
            
        Returns:
            Dict: Resposta da API
        """
        try:
            url = f"{self.api_host}/v1/message/send-list"
            
            params = {
                "instanceId": self.instance_id
            }
            
            payload = {
                "phone": numero_telefone,
                "title": f"‚ùì {titulo}",
                "description": pergunta,
                "buttonText": "Responder",
                "footerText": f"{self.company_name} - Confirma√ß√£o",
                "sections": [
                    {
                        "title": "Sua resposta:",
                        "rows": [
                            {
                                "title": "‚úÖ Sim",
                                "description": "Confirmar e prosseguir",
                                "rowId": "confirmar_sim"
                            },
                            {
                                "title": "‚ùå N√£o",
                                "description": "Cancelar a√ß√£o",
                                "rowId": "confirmar_nao"
                            }
                        ]
                    }
                ],
                "delayMessage": 1
            }
            
            response = requests.post(url, json=payload, headers=self.headers, params=params)
            
            if response.status_code == 200:
                logger.info("‚úÖ Menu de confirma√ß√£o enviado com sucesso")
                return {
                    "sucesso": True,
                    "dados": response.json(),
                    "status_code": response.status_code
                }
            else:
                logger.error(f"‚ùå Erro ao enviar menu: {response.status_code}")
                return {
                    "sucesso": False,
                    "erro": response.text,
                    "status_code": response.status_code
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar menu de confirma√ß√£o: {str(e)}")
            return {
                "sucesso": False,
                "erro": str(e),
                "status_code": 500
            }

    # Menu de Confirma√ß√£o de Atendimento
    def enviar_menu_confirmacao_atendimento(self, numero_telefone: str, cliente_nome: str) -> Dict[str, Any]:
        """
        Envia menu de confirma√ß√£o espec√≠fico para iniciar atendimento com cliente
        
        Args:
            numero_telefone (str): N√∫mero do telefone do corretor
            cliente_nome (str): Nome do cliente para personalizar a mensagem
            
        Returns:
            Dict: Resposta da API
        """
        try:
            url = f"{self.api_host}/v1/message/send-list"
            
            params = {
                "instanceId": self.instance_id
            }
            
            payload = {
                "phone": numero_telefone,
                "title": "üè† Iniciar Atendimento",
                "description": f"Posso seguir com o Atendimento ao Cliente {cliente_nome}?",
                "buttonText": "Responder",
                "footerText": f"{self.company_name} - Fechamento",
                "sections": [
                    {
                        "title": "Sua decis√£o:",
                        "rows": [
                            {
                                "title": "‚úÖ Sim",
                                "description": "Iniciar contato com o cliente",
                                "rowId": "confirmar_atendimento_sim"
                            },
                            {
                                "title": "‚ùå N√£o",
                                "description": "Encerrar processo",
                                "rowId": "confirmar_atendimento_nao"
                            }
                        ]
                    }
                ],
                "delayMessage": 1
            }
            
            response = requests.post(url, json=payload, headers=self.headers, params=params)
            
            if response.status_code == 200:
                logger.info("‚úÖ Menu de confirma√ß√£o de atendimento enviado com sucesso")
                return {
                    "sucesso": True,
                    "dados": response.json(),
                    "status_code": response.status_code
                }
            else:
                logger.error(f"‚ùå Erro ao enviar menu: {response.status_code}")
                return {
                    "sucesso": False,
                    "erro": response.text,
                    "status_code": response.status_code
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar menu de confirma√ß√£o de atendimento: {str(e)}")
            return {
                "sucesso": False,
                "erro": str(e),
                "status_code": 500
            }

    # Menu de Confirma√ß√£o do Cliente
    def enviar_menu_confirmacao_cliente(self, numero_telefone: str, corretor_nome: str) -> Dict[str, Any]:
        """
        Envia menu de confirma√ß√£o para o cliente sobre aceitar atendimento do corretor
        
        Args:
            numero_telefone (str): N√∫mero do telefone do cliente
            corretor_nome (str): Nome do corretor
            
        Returns:
            Dict: Resposta da API
        """
        try:
            url = f"{self.api_host}/v1/message/send-list"
            
            params = {
                "instanceId": self.instance_id
            }
            
            payload = {
                "phone": numero_telefone,
                "title": "üè¢ Confirma√ß√£o de Atendimento",
                "description": f"O corretor {corretor_nome} da {self.company_name} est√° pronto para atend√™-lo. Deseja prosseguir?",
                "buttonText": "Selecione uma op√ß√£o",
                "footerText": f"{self.company_name} - Loca√ß√£o Sem Fiador",
                "sections": [
                    {
                        "title": "Op√ß√µes de Atendimento",
                        "rows": [
                            {
                                "title": "‚úÖ Sim, aceito o atendimento",
                                "description": "Prosseguir com o corretor",
                                "rowId": "cliente_aceita_atendimento"
                            },
                            {
                                "title": "‚ùå N√£o, n√£o aceito",
                                "description": "Encerrar atendimento",
                                "rowId": "cliente_recusa_atendimento"
                            }
                        ]
                    }
                ],
                "delayMessage": 2
            }
            
            response = requests.post(url, json=payload, headers=self.headers, params=params)
            
            if response.status_code == 200:
                logger.info("‚úÖ Menu de confirma√ß√£o do cliente enviado com sucesso")
                return {
                    "sucesso": True,
                    "dados": response.json(),
                    "status_code": response.status_code
                }
            else:
                logger.error(f"‚ùå Erro ao enviar menu do cliente: {response.status_code}")
                return {
                    "sucesso": False,
                    "erro": response.text,
                    "status_code": response.status_code
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar menu de confirma√ß√£o do cliente: {str(e)}")
            return {
                "sucesso": False,
                "erro": str(e),
                "status_code": 500
            }

    def enviar_menu_confirmacao_endereco(self, numero_telefone: str, endereco: str) -> Dict[str, Any]:
        """
        Envia menu de confirma√ß√£o de endere√ßo
        
        Args:
            numero_telefone (str): N√∫mero do telefone do destinat√°rio
            endereco (str): Endere√ßo encontrado para confirmar
            
        Returns:
            Dict: Resposta da API
        """
        try:
            url = f"{self.api_host}/v1/message/send-list"
            
            params = {
                "instanceId": self.instance_id
            }
            
            payload = {
                "phone": numero_telefone,
                "title": "üìç Confirma√ß√£o de Endere√ßo",
                "description": "O endere√ßo encontrado est√° correto?",
                "buttonText": "Responder",
                "footerText": f"{self.company_name} - Loca√ß√£o Sem Fiador",
                "sections": [
                    {
                        "title": "Op√ß√µes",
                        "rows": [
                            {
                                "title": "‚úÖ Sim, endere√ßo correto",
                                "description": "Confirmar e prosseguir para n√∫mero",
                                "rowId": "confirmar_endereco_sim"
                            },
                            {
                                "title": "‚ùå N√£o, endere√ßo incorreto",
                                "description": "Digitar CEP novamente",
                                "rowId": "confirmar_endereco_nao"
                            }
                        ]
                    }
                ],
                "delayMessage": 1
            }
            
            response = requests.post(url, json=payload, headers=self.headers, params=params)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ Menu de confirma√ß√£o de endere√ßo enviado para {numero_telefone}")
                return {
                    "sucesso": True,
                    "dados": response.json(),
                    "status_code": response.status_code
                }
            else:
                logger.error(f"‚ùå Erro ao enviar menu: {response.status_code}")
                return {
                    "sucesso": False,
                    "erro": response.text,
                    "status_code": response.status_code
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar menu de confirma√ß√£o de endere√ßo: {str(e)}")
            return {
                "sucesso": False,
                "erro": str(e),
                "status_code": 500
            }

    def enviar_menu_confirmacao_documentos(self, numero_telefone: str) -> Dict[str, Any]:
        """
        Envia menu de confirma√ß√£o para prosseguir com coleta de documentos para loca√ß√£o
        
        Args:
            numero_telefone (str): N√∫mero do telefone do destinat√°rio
            
        Returns:
            Dict: Resposta da API
        """
        try:
            url = f"{self.api_host}/v1/message/send-list"
            
            params = {
                "instanceId": self.instance_id
            }
            
            payload = {
                "phone": numero_telefone,
                "title": "üìÑ Coleta de Documentos",
                "description": "Deseja prosseguir com a coleta de documentos para sua loca√ß√£o?",
                "buttonText": "Responder",
                "footerText": f"{self.company_name} - Loca√ß√£o Sem Fiador",
                "sections": [
                    {
                        "title": "Sua decis√£o:",
                        "rows": [
                            {
                                "title": "‚úÖ Sim, quero enviar documentos",
                                "description": "Prosseguir com coleta de documentos",
                                "rowId": "confirmar_documentos_sim"
                            },
                            {
                                "title": "‚ùå N√£o, n√£o quero agora",
                                "description": "Encerrar processo por enquanto",
                                "rowId": "confirmar_documentos_nao"
                            }
                        ]
                    }
                ],
                "delayMessage": 1
            }
            
            response = requests.post(url, json=payload, headers=self.headers, params=params)
            
            if response.status_code == 200:
                logger.info("‚úÖ Menu de confirma√ß√£o de documentos enviado com sucesso")
                return {
                    "sucesso": True,
                    "dados": response.json(),
                    "status_code": response.status_code
                }
            else:
                logger.error(f"‚ùå Erro ao enviar menu: {response.status_code}")
                return {
                    "sucesso": False,
                    "erro": response.text,
                    "status_code": response.status_code
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar menu de confirma√ß√£o de documentos: {str(e)}")
            return {
                "sucesso": False,
                "erro": str(e),
                "status_code": 500
            }
        
        