import os
import requests
from typing import Dict, Any
import logging
from .openai_service import OpenAIService
from .buscar_usuarios_supabase import identificar_tipo_usuario
from .menu_service_whatsapp import MenuServiceWhatsApp
import time

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class WhatsAppService:
    """
    Servi√ßo para integra√ß√£o com W-API do WhatsApp
    
    FUNCIONALIDADES PRINCIPAIS:
    ==========================
    
    1. IDENTIFICA√á√ÉO DE USU√ÅRIOS:
       - Processa CPF via OpenAI
       - Identifica se √© colaborador ou cliente
       - Direciona para fluxos espec√≠ficos
    
    2. FLUXO DIFERENCIADO POR TIPO:
       - COLABORADORES: Recebem menu de op√ß√µes (IA + Fechamento)
       - CLIENTES: Mant√™m fluxo original (LGPD + Documentos)
    
    3. MENUS INTERATIVOS:
       - Integra√ß√£o com MenuServiceWhatsApp
       - Processamento de respostas de menu
       - Tratamento de erros robusto
    
    4. COMUNICA√á√ÉO:
       - Envio de mensagens
       - Marca√ß√£o como lida
       - Processamento de webhooks
    
    MANUTEN√á√ÉO:
    ===========
    - Logs detalhados em todas as opera√ß√µes
    - Tratamento de exce√ß√µes em cada fun√ß√£o
    - Coment√°rios explicativos para futuras altera√ß√µes
    - Fallbacks para quando menus falham
    
    VERS√ÉO: 2.0 (Adicionado suporte a menus para colaboradores)
    DATA: Mar√ßo/2024
    """
    
    def __init__(self):
        # Carregar configura√ß√µes do .env
        self.api_host = os.getenv('W_API_HOST', 'https://api.w-api.app')
        self.instance_id = os.getenv('W_API_INSTANCE_ID')
        self.token = os.getenv('W_API_TOKEN')
        
        # Headers padr√£o com Authorization Bearer
        self.headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.token}'
        }
        
        # Inicializar OpenAI Service
        self.openai_service = OpenAIService()
        
        # Inicializar Menu Service para WhatsApp
        # Este servi√ßo gerencia menus interativos enviados aos usu√°rios
        self.menu_service = MenuServiceWhatsApp()
        
        # Dicion√°rio para armazenar CPFs temporariamente
        self.cpfs_temp = {}
        
        # Sistema de sess√µes com timeout para IA especializada
        self.sessoes_ativas = {}
        self.TIMEOUT_SESSAO = 30 * 60  # 30 minutos em segundos
        
        # Sistema de coleta de dados do cliente para fechamento
        # Formato: {telefone_colaborador: {"nome": "", "telefone": "", "etapa": "aguardando_nome|aguardando_telefone|concluido"}}
        self.coleta_dados_cliente = {}
        
        # Sistema de atendimentos iniciados com clientes
        # Formato: {telefone_corretor: {"cliente_nome": "", "cliente_telefone": "", "corretor_nome": "", "status": "..."}}
        self.atendimentos_cliente = {}
        
        logger.info(f"WhatsApp Service inicializado para inst√¢ncia: {self.instance_id}")
        logger.info("üîß Novo recurso ativo: Menu diferenciado para colaboradores")

    def verificar_numero_tem_whatsapp(self, numero_telefone: str) -> Dict[str, Any]:
        """
        Verifica se um n√∫mero de telefone possui WhatsApp ativo
        
        Args:
            numero_telefone (str): N√∫mero no formato brasileiro (ex: 5511999999999)
            
        Returns:
            Dict: {"existe": bool, "numero": str, "sucesso": bool}
        """
        try:
            # Limpar n√∫mero (remover caracteres especiais)
            numero_limpo = ''.join(filter(str.isdigit, numero_telefone))
            
            # Se n√£o come√ßar com 55, adicionar
            if not numero_limpo.startswith('55'):
                numero_limpo = '55' + numero_limpo
            
            logger.info(f"üì± Verificando se n√∫mero tem WhatsApp: {numero_limpo}")
            
            url = f"{self.api_host}/v1/contacts/phone-exists"
            params = {
                "instanceId": self.instance_id,
                "phoneNumber": numero_limpo
            }
            
            response = requests.get(url, headers=self.headers, params=params)
            
            if response.status_code == 200:
                resultado = response.json()
                existe = resultado.get("exists", False)
                
                logger.info(f"‚úÖ Verifica√ß√£o WhatsApp: {numero_limpo} ‚Üí {'EXISTE' if existe else 'N√ÉO EXISTE'}")
                
                return {
                    "sucesso": True,
                    "existe": existe,
                    "numero": numero_limpo,
                    "dados_api": resultado
                }
            else:
                logger.error(f"‚ùå Erro na verifica√ß√£o WhatsApp: {response.status_code}")
                return {
                    "sucesso": False,
                    "erro": f"API retornou status {response.status_code}",
                    "numero": numero_limpo
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar WhatsApp: {str(e)}")
            return {
                "sucesso": False,
                "erro": str(e),
                "numero": numero_telefone
            }
        
        # IMPORTANTE PARA MANUTEN√á√ÉO:
        # ===========================
        # 
        # FLUXO DE USO DA NOVA FUNCIONALIDADE:
        # 
        # 1. Usu√°rio envia CPF
        # 2. Sistema identifica se √© colaborador ou cliente
        # 3. Se COLABORADOR: 
        #    - Envia mensagem de boas-vindas
        #    - Aguarda 3 segundos
        #    - Envia menu com op√ß√µes: "Usar IA" e "Iniciar Fechamento"
        # 4. Se CLIENTE:
        #    - Mant√©m fluxo original (sem altera√ß√µes)
        # 
        # PARA PROCESSAR RESPOSTAS DE MENU:
        # - Use a fun√ß√£o: processar_resposta_menu_colaborador()
        # - Passe o row_id recebido do webhook
        # 
                 # C√ìDIGOS DE ROW_ID DISPON√çVEIS:
         # - "usar_ia_duvidas" ‚Üí Ativa chat com IA
         # - "iniciar_fechamento" ‚Üí Inicia processo de fechamento

    def identificar_tipo_usuario_rapido(self, remetente: str) -> str:
        """
        Identifica√ß√£o r√°pida do tipo de usu√°rio para processamento de inten√ß√µes
        
        Esta fun√ß√£o faz uma verifica√ß√£o b√°sica para determinar se o usu√°rio
        √© colaborador ou cliente, sem fazer consultas pesadas ao banco.
        
        Args:
            remetente (str): N√∫mero do telefone do usu√°rio
            
        Returns:
            str: "colaborador" | "cliente" | "desconhecido"
            
        Nota:
            - Verifica primeiro se existe sess√£o ativa (colaborador)
            - Futuramente pode consultar cache de usu√°rios identificados
            - Em caso de d√∫vida, retorna "desconhecido" para continuar fluxo normal
        """
        try:
            # VERIFICA√á√ÉO 1: Se tem sess√£o ativa, √© colaborador
            if remetente in self.sessoes_ativas:
                return "colaborador"
            
            # VERIFICA√á√ÉO 2: Aqui poder√≠amos consultar cache de usu√°rios identificados
            # Por enquanto, retorna desconhecido para n√£o quebrar o fluxo
            # TODO: Implementar cache de identifica√ß√£o de usu√°rios
            
            logger.info(f"üîç Tipo de usu√°rio n√£o identificado rapidamente: {remetente}")
            return "desconhecido"
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro na identifica√ß√£o r√°pida de usu√°rio: {e}")
            return "desconhecido"

    def processar_intencao_interpretada(self, remetente: str, interpretacao: Dict[str, Any], message_id: str = None) -> Dict[str, Any]:
        """
        Processa inten√ß√µes detectadas pelo interpretador GPT
        
        Esta fun√ß√£o √© chamada quando o interpretador GPT detecta uma inten√ß√£o
        espec√≠fica (sauda√ß√£o ou menu) e executa a a√ß√£o apropriada.
        
        Args:
            remetente (str): N√∫mero do telefone do usu√°rio
            interpretacao (Dict): Resultado da an√°lise do GPT com inten√ß√£o detectada
            message_id (str, optional): ID da mensagem para marcar como lida
            
        Returns:
            Dict com resultado do processamento da inten√ß√£o
            
        Fluxo de processamento:
            - SAUDA√á√ÉO ‚Üí Primeira mensagem da Bia (solicita CPF)
            - MENU + Colaborador ‚Üí Menu de op√ß√µes de atendimento
            - MENU + Cliente ‚Üí [FUTURO] Menu do cliente
            - Outros casos ‚Üí Continua fluxo normal
        """
        try:
            intencao = interpretacao.get("intencao")
            confianca = interpretacao.get("confianca", 0.0)
            
            logger.info(f"üéØ Processando inten√ß√£o '{intencao}' com confian√ßa {confianca:.2f}")
            
            # Marcar mensagem como lida se fornecido
            if message_id:
                self.marcar_como_lida(remetente, message_id)
            
            # ====================================================================
            # PROCESSAMENTO DE SAUDA√á√ïES - Primeira mensagem da Bia
            # ====================================================================
            if intencao == "saudacao":
                logger.info(f"üëã Sauda√ß√£o detectada de: {remetente}")
                
                # Enviar primeira mensagem padr√£o da Bia
                resultado = self.primeira_mensagem(remetente, message_id)
                
                # Adicionar informa√ß√µes da interpreta√ß√£o para logs
                resultado.update({
                    "interpretacao_gpt": True,
                    "intencao_detectada": "saudacao",
                    "confianca_gpt": confianca,
                    "acao_executada": "primeira_mensagem_bia"
                })
                
                return resultado
            
            # ====================================================================
            # PROCESSAMENTO DE SOLICITA√á√ïES DE MENU
            # ====================================================================
            elif intencao == "menu":
                logger.info(f"üìã Solicita√ß√£o de menu detectada de: {remetente}")
                
                # Identificar tipo de usu√°rio para enviar menu apropriado
                tipo_usuario = self.identificar_tipo_usuario_rapido(remetente)
                
                # MENU PARA COLABORADORES - Implementado
                if tipo_usuario == "colaborador":
                    logger.info(f"üë®‚Äçüíº Enviando menu de colaborador para: {remetente}")
                    
                    # Enviar menu de op√ß√µes de atendimento existente
                    resultado_menu = self.menu_service.enviar_menu_opcoes_atendimento(remetente)
                    
                    if resultado_menu.get("sucesso"):
                        return {
                            "sucesso": True,
                            "interpretacao_gpt": True,
                            "intencao_detectada": "menu",
                            "tipo_usuario": "colaborador",
                            "acao_executada": "menu_colaborador_enviado",
                            "confianca_gpt": confianca,
                            "mensagem_resposta": "Menu de colaborador enviado com sucesso"
                        }
                    else:
                        # Fallback se menu falhar
                        logger.warning(f"‚ö†Ô∏è Falha ao enviar menu de colaborador")
                        self.enviar_mensagem(remetente, "Menu temporariamente indispon√≠vel. Como posso ajudar?")
                        return {
                            "sucesso": False,
                            "erro": "falha_envio_menu_colaborador",
                            "fallback_executado": True
                        }
                
                # MENU PARA CLIENTES - Futuro
                elif tipo_usuario == "cliente":
                    logger.info(f"üë• Menu de cliente solicitado (implementa√ß√£o futura): {remetente}")
                    
                    # TODO: Implementar menu espec√≠fico para clientes
                    # return self.menu_service.enviar_menu_cliente(remetente)
                    
                    # Por enquanto, apenas registra a solicita√ß√£o
                    return {
                        "sucesso": True,
                        "interpretacao_gpt": True,
                        "intencao_detectada": "menu",
                        "tipo_usuario": "cliente", 
                        "acao_executada": "menu_cliente_pendente",
                        "confianca_gpt": confianca,
                        "implementacao": "futura",
                        "mensagem_resposta": "Menu de cliente ser√° implementado em breve"
                    }
                
                # USU√ÅRIO DESCONHECIDO - Continuar fluxo normal
                else:
                    logger.info(f"‚ùì Menu solicitado por usu√°rio n√£o identificado: {remetente}")
                    return {
                        "bypass_fluxo": False,
                        "continuar_fluxo_normal": True,
                        "motivo": "usuario_nao_identificado"
                    }
            
            # ====================================================================
            # OUTRAS INTEN√á√ïES - Continuar fluxo normal
            # ====================================================================
            else:
                logger.info(f"üîÑ Inten√ß√£o '{intencao}' n√£o requer bypass, continuando fluxo normal")
                return {
                    "bypass_fluxo": False,
                    "continuar_fluxo_normal": True,
                    "intencao_detectada": intencao
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar inten√ß√£o interpretada: {str(e)}")
            # Em caso de erro, sempre continuar fluxo normal
            return {
                "bypass_fluxo": False,
                "continuar_fluxo_normal": True,
                "erro": str(e)
            }

    def sessao_ativa(self, telefone: str) -> bool:
        """
        Verifica se existe uma sess√£o ativa para o telefone e se n√£o expirou
        
        Args:
            telefone (str): N√∫mero do telefone do colaborador
            
        Returns:
            bool: True se sess√£o ativa, False se n√£o existe ou expirou
        """
        if telefone not in self.sessoes_ativas:
            return False
        
        sessao = self.sessoes_ativas[telefone]
        agora = time.time()
        
        if agora > sessao["expira_em"]:
            # Sess√£o expirada, remover
            logger.info(f"üïê Sess√£o expirada para colaborador: {telefone}")
            del self.sessoes_ativas[telefone]
            return False
        
        # Atualizar √∫ltima atividade
        sessao["ultima_atividade"] = agora
        logger.info(f"‚úÖ Sess√£o ativa confirmada para colaborador: {telefone}")
        return True

    def enviar_mensagem(self, numero_telefone: str, mensagem: str) -> Dict[str, Any]:
        """
        Envia uma mensagem via W-API
        
        Args:
            numero_telefone (str): N√∫mero do telefone no formato internacional
            mensagem (str): Texto da mensagem a ser enviada
            
        Returns:
            Dict: Resposta da API
        """
        try:
            # CORRE√á√ÉO: Garantir que quebras de linha sejam interpretadas corretamente
            mensagem_formatada = mensagem.replace('\\n', '\n') if '\\n' in mensagem else mensagem
            
            # Nova URL da API W-API
            url = f"{self.api_host}/v1/message/send-text"
            
            # Par√¢metros da nova API
            params = {
                "instanceId": self.instance_id
            }
            
            # Dados da mensagem conforme nova API
            payload = {
                "phone": numero_telefone,
                "message": mensagem_formatada,
                "delayMessage": 2
            }
            
            # Fazer requisi√ß√£o
            response = requests.post(url, json=payload, headers=self.headers, params=params)
            
            if response.status_code == 200:
                logger.info("‚úÖ Mensagem enviada")
                return {
                    "sucesso": True,
                    "dados": response.json(),
                    "status_code": response.status_code
                }
            else:
                logger.error(f"‚ùå Erro ao enviar mensagem: {response.status_code}")
                return {
                    "sucesso": False,
                    "erro": response.text,
                    "status_code": response.status_code
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar mensagem: {str(e)}")
            return {
                "sucesso": False,
                "erro": str(e),
                "status_code": 500
            }
    
    def marcar_como_lida(self, numero_telefone: str, message_id: str) -> Dict[str, Any]:
        """
        Marca uma mensagem como lida
        
        Args:
            numero_telefone (str): N√∫mero do telefone
            message_id (str): ID da mensagem
            
        Returns:
            Dict: Resposta da API
        """
        try:
            url = f"{self.api_host}/v1/message/read-message"
            
            params = {
                "instanceId": self.instance_id
            }
            
            payload = {
                "phone": numero_telefone,
                "messageId": message_id
            }
            
            response = requests.post(url, json=payload, headers=self.headers, params=params)
            
            return {
                "sucesso": response.status_code == 200,
                "dados": response.json() if response.status_code == 200 else None,
                "status_code": response.status_code
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao marcar mensagem como lida: {str(e)}")
            return {"sucesso": False, "erro": str(e)}
    
    def processar_webhook_mensagem(self, webhook_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Processa dados do webhook de mensagem recebida (Formato W-API)
        
        Args:
            webhook_data (Dict): Dados do webhook da W-API
            
        Returns:
            Dict: Dados processados da mensagem
        """
        try:
            # Verificar se √© o formato da W-API
            if webhook_data.get('event') == 'webhookReceived':
                # Verificar se n√£o √© mensagem nossa (fromMe)
                if webhook_data.get('fromMe', False):
                    return {
                        "valido": False,
                        "motivo": "Mensagem pr√≥pria ignorada"
                    }
                
                # Extrair dados da mensagem
                msg_content = webhook_data.get('msgContent', {})
                sender = webhook_data.get('sender', {})
                chat = webhook_data.get('chat', {})
                
                # Extrair texto da mensagem
                texto_mensagem = msg_content.get('conversation', '')
                
                # Se n√£o for conversation, tentar outros campos
                if not texto_mensagem:
                    texto_mensagem = msg_content.get('text', '') or msg_content.get('message', '')
                
                # NOVO: Verificar se √© resposta de menu (listResponseMessage)
                # Para manter compatibilidade, vamos considerar v√°lido mesmo sem texto
                list_response = msg_content.get('listResponseMessage')
                if list_response and not texto_mensagem:
                    # √â uma resposta de menu, criar texto descritivo para processamento
                    opcao_selecionada = list_response.get('title', 'Op√ß√£o selecionada')
                    texto_mensagem = f"[MENU] {opcao_selecionada}"
                
                # Extrair remetente
                remetente = sender.get('id', '')
                nome_remetente = sender.get('pushName', '')
                message_id = webhook_data.get('messageId', '')
                
                if remetente and texto_mensagem:
                    return {
                        "valido": True,
                        "remetente": remetente,
                        "mensagem": texto_mensagem,
                        "nome_remetente": nome_remetente,
                        "message_id": message_id,
                        "chat_id": chat.get('id'),
                        "timestamp": webhook_data.get('moment')
                    }
                else:
                    return {
                        "valido": False,
                        "motivo": "Dados de mensagem incompletos"
                    }
            else:
                return {
                    "valido": False,
                    "motivo": f"Evento n√£o suportado: {webhook_data.get('event')}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar webhook: {str(e)}")
            return {
                "valido": False,
                "erro": str(e)
            }
    
    def primeira_mensagem(self, remetente: str, message_id: str = None) -> Dict[str, Any]:
        """
        Envia primeira mensagem da Bia Corretora de Loca√ß√£o
        
        Args:
            remetente (str): N√∫mero do remetente
            message_id (str): ID da mensagem (opcional para marcar como lida)
            
        Returns:
            Dict: Resultado do processamento
        """
        try:
            # Marcar mensagem como lida
            if message_id:
                self.marcar_como_lida(remetente, message_id)
            
            # Mensagem de boas-vindas da Bia
            mensagem = (
                "Ol√°! üëã\n\n"
                "Aqui √© a Bia, Corretora de Loca√ß√£o\n\n"
                "Para iniciarmos seu atendimento, por favor me envie seu CPF (apenas n√∫meros).\n\n"
                "Exemplo: 12345678901"
            )
            
            # Enviar mensagem
            resultado = self.enviar_mensagem(remetente, mensagem)
            
            return {
                "novo_usuario": True,
                "cpf": None,
                "solicitar_cpf": True,
                "mensagem_resposta": mensagem
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar primeira mensagem: {str(e)}")
            return {
                "novo_usuario": True,
                "cpf": None,
                "solicitar_cpf": True,
                "mensagem_resposta": "Erro ao enviar mensagem inicial"
            }
    
    def interpretar_mensagem_usuario(self, remetente: str, mensagem: str, message_id: str = None) -> Dict[str, Any]:
        """
        Interpreta mensagem do usu√°rio e determina pr√≥xima a√ß√£o
        
        Esta √© a fun√ß√£o CENTRAL de processamento de mensagens que:
        1. PRIMEIRO: Usa interpretador GPT para detectar inten√ß√µes (sauda√ß√µes, menu)
        2. SEGUNDO: Se n√£o for inten√ß√£o especial, segue fluxo original
        
        Funcionalidades implementadas:
        - üß† Interpretador inteligente GPT detecta sauda√ß√µes e solicita√ß√µes de menu
        - üëã Sauda√ß√µes autom√°ticas ‚Üí Primeira mensagem da Bia
        - üìã "Menu" de colaboradores ‚Üí Menu de op√ß√µes de atendimento
        - üìã "Menu" de clientes ‚Üí [FUTURO] Menu espec√≠fico do cliente
        - üîÑ Fallback seguro ‚Üí Se interpretador falhar, continua fluxo normal
        
        Args:
            remetente (str): N√∫mero do remetente
            mensagem (str): Mensagem do usu√°rio  
            message_id (str): ID da mensagem (opcional)
            
        Returns:
            Dict: Resultado do processamento
            
        Fluxo de prioridades:
            0. Interpretador GPT (sauda√ß√µes, menu)
            1. Identifica√ß√£o de CPF
            2. Sess√£o IA ativa (colaboradores)
            3. Novo usu√°rio
            4. Outras mensagens
        """
        try:
            # Marcar mensagem como lida
            if message_id:
                self.marcar_como_lida(remetente, message_id)
            
            # ====================================================================
            # PRIORIDADE 0: VERIFICAR SE √â COLABORADOR EM PROCESSO DE COLETA DE DADOS
            # =========================================================================
            # IMPORTANTE: Esta verifica√ß√£o deve ser ANTES do interpretador GPT para evitar
            # que telefones sejam interpretados como CPF durante a coleta!
            if remetente in self.coleta_dados_cliente and self.coleta_dados_cliente[remetente]["etapa"] != "concluido":
                logger.info(f"üìù Colaborador em processo de coleta detectado: {remetente}")
                return self.processar_coleta_dados_cliente(remetente, mensagem, message_id)
            
            # ====================================================================
            # PRIORIDADE 1: INTERPRETADOR INTELIGENTE GPT
            # ====================================================================
            # Usar novo interpretador para detectar inten√ß√µes antes de tudo
            try:
                logger.info("üß† Iniciando interpreta√ß√£o inteligente com GPT...")
                interpretacao = self.openai_service.interpretar_intencao_mensagem(mensagem, remetente)
                
                # Se GPT detectou inten√ß√£o espec√≠fica com alta confian√ßa
                if interpretacao.get("bypass_fluxo") and interpretacao.get("confianca", 0) >= 0.7:
                    logger.info(f"üéØ Inten√ß√£o detectada com alta confian√ßa: {interpretacao['intencao']}")
                    
                    # Processar a inten√ß√£o detectada
                    resultado_intencao = self.processar_intencao_interpretada(remetente, interpretacao, message_id)
                    
                    # Se processamento foi bem-sucedido, retornar resultado
                    if not resultado_intencao.get("continuar_fluxo_normal"):
                        logger.info("‚úÖ Inten√ß√£o processada com sucesso, finalizando")
                        return resultado_intencao
                    
                # Se chegou aqui, continuar com fluxo original
                logger.info("üîÑ Continuando com fluxo original ap√≥s interpreta√ß√£o GPT")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro no interpretador GPT, continuando fluxo normal: {e}")
                # Em caso de erro no interpretador, continuar normalmente
            
            # ====================================================================
            # FLUXO ORIGINAL PRESERVADO (SEM ALTERA√á√ïES!)
            # ====================================================================
            
            # Interpretar mensagem com OpenAI (fun√ß√£o original)
            resultado = self.openai_service.interpretar_mensagem(mensagem)
            logger.info(f"üîç Resultado da interpreta√ß√£o: {resultado}")
            
            # PRIORIDADE 2: Se encontrou CPF, processar imediatamente
            if resultado.get("cpf"):
                cpf = resultado["cpf"]
                self.cpfs_temp[remetente] = cpf
                logger.info(f"‚úÖ CPF recebido: {cpf}")
                
                # Identificar se √© corretor ou cliente
                identificacao = identificar_tipo_usuario(cpf)
                logger.info(f"üë§ Tipo de usu√°rio identificado: {identificacao}")
                
                # Usar apenas a mensagem da identifica√ß√£o
                mensagem_resposta = identificacao['mensagem']
                
                # FLUXO DIFERENCIADO BASEADO NO TIPO DE USU√ÅRIO
                # =================================================
                
                if identificacao["tipo"] == "colaborador":
                    # FLUXO PARA COLABORADORES/CORRETORES
                    # -----------------------------------
                    logger.info("üè¢ Usu√°rio identificado como COLABORADOR - Enviando menu de op√ß√µes")
                    
                    # 1. Enviar mensagem de boas-vindas personalizada
                    self.enviar_mensagem(remetente, mensagem_resposta)
                    
                    # 2. Aguardar 3 segundos para melhor experi√™ncia do usu√°rio
                    import time
                    time.sleep(3)
                    
                    # 3. Enviar menu de op√ß√µes de atendimento espec√≠fico para corretores
                    # Este menu cont√©m: "Usar IA para D√∫vidas" e "Iniciar Fechamento Loca√ß√£o"
                    try:
                        resultado_menu = self.menu_service.enviar_menu_opcoes_atendimento(remetente)
                        if resultado_menu["sucesso"]:
                            logger.info("‚úÖ Menu de op√ß√µes enviado com sucesso para colaborador")
                        else:
                            logger.error(f"‚ùå Erro ao enviar menu: {resultado_menu.get('erro')}")
                    except Exception as e_menu:
                        logger.error(f"‚ùå Erro ao enviar menu de op√ß√µes: {str(e_menu)}")
                        # Fallback: enviar mensagem simples se menu falhar
                        self.enviar_mensagem(remetente, "Menu de op√ß√µes temporariamente indispon√≠vel. Digite sua d√∫vida que irei ajudar!")
                
                else:
                    # FLUXO PARA CLIENTES (MANTIDO ORIGINAL)
                    # -------------------------------------
                    logger.info("üë• Usu√°rio identificado como CLIENTE - Mantendo fluxo original")
                    
                    # Para clientes, mantemos o comportamento original:
                    # - Enviar apenas mensagem de resposta da identifica√ß√£o
                    # - Fluxo normal de LGPD ser√° tratado em outro momento/lugar
                    self.enviar_mensagem(remetente, mensagem_resposta)
                
                # FINALIZA√á√ÉO COMUM PARA AMBOS OS FLUXOS
                # ======================================
                
                # Adicionar tipo de usu√°rio ao resultado para logs/debug
                resultado["tipo_usuario"] = identificacao["tipo"]
                resultado["mensagem_resposta"] = mensagem_resposta
                
                # Log final da opera√ß√£o
                logger.info(f"‚úÖ Processamento completo para {identificacao['tipo']}: {remetente}")
                
                return resultado
            
            # PRIORIDADE 3: VERIFICAR SE √â COLABORADOR COM SESS√ÉO IA ATIVA 
            # =============================================================
            if self.sessao_ativa(remetente):
                logger.info(f"ü§ñ Colaborador com IA Especializada ativa detectado: {remetente}")
                return self.processar_duvida_colaborador(remetente, mensagem, message_id)
            
            # PRIORIDADE 4: Se for novo usu√°rio e N√ÉO tem CPF, enviar primeira mensagem
            if resultado.get("novo_usuario"):
                logger.info("üëã Novo usu√°rio detectado")
                return self.primeira_mensagem(remetente, message_id)
            
            # PRIORIDADE 5: Outras mensagens
            # Enviar resposta ao usu√°rio
            self.enviar_mensagem(remetente, resultado["mensagem_resposta"])
            
            return resultado
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao interpretar mensagem do usu√°rio: {str(e)}")
            return {
                "cpf": None,
                "novo_usuario": False,
                "solicitar_cpf": True,
                "mensagem_resposta": "Desculpe, tive um problema ao processar sua mensagem. Por favor, envie seu CPF novamente."
            }

    def processar_resposta_menu_colaborador(self, remetente: str, row_id: str, webhook_data: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Processa respostas de menus interativos especificamente para colaboradores
        
        Esta fun√ß√£o √© chamada quando um colaborador clica em uma op√ß√£o do menu
        enviado pelo sistema (ex: "Usar IA para D√∫vidas", "Iniciar Fechamento Loca√ß√£o")
        
        Args:
            remetente (str): N√∫mero do telefone do colaborador que respondeu
            row_id (str): ID da op√ß√£o selecionada no menu (ex: "usar_ia_duvidas")
            webhook_data (Dict, optional): Dados completos do webhook para contexto adicional
            
        Returns:
            Dict: Resultado do processamento com pr√≥xima a√ß√£o
            
        Exemplo de uso:
            resultado = service.processar_resposta_menu_colaborador(
                "5511999999999", 
                "usar_ia_duvidas"
            )
        """
        try:
            logger.info(f"üìã Processando resposta de menu do COLABORADOR: {remetente} ‚Üí {row_id}")
            
            # Usar o menu service para processar a resposta
            # O menu service cont√©m toda a l√≥gica de mapeamento de a√ß√µes
            resultado_processamento = self.menu_service.processar_resposta_menu(
                row_id=row_id,
                usuario_id=remetente,
                webhook_data=webhook_data
            )
            
            if resultado_processamento["sucesso"]:
                # RESPOSTA PROCESSADA COM SUCESSO
                logger.info(f"‚úÖ A√ß√£o identificada: {resultado_processamento['acao']}")
                
                # Enviar mensagem de resposta ao colaborador
                mensagem_resposta = resultado_processamento["mensagem_resposta"]
                self.enviar_mensagem(remetente, mensagem_resposta)
                
                # VERIFICAR A√á√ïES ESPECIAIS DOS COLABORADORES
                # ==========================================
                
                # Ativa√ß√£o da IA Especializada
                if resultado_processamento["acao"] == "ativar_ia_especializada":
                    # Criar sess√£o ativa com timeout para este colaborador
                    agora = time.time()
                    self.sessoes_ativas[remetente] = {
                        "tipo": "ia_especializada",
                        "dados_colaborador": None,  # Ser√° preenchido quando necess√°rio
                        "ativado_em": agora,
                        "expira_em": agora + self.TIMEOUT_SESSAO,
                        "ultima_atividade": agora
                    }
                    logger.info(f"ü§ñ IA Especializada ATIVADA para colaborador: {remetente} (expira em 30min)")
                
                # In√≠cio da coleta de dados do cliente
                elif resultado_processamento["acao"] == "coletar_nome_cliente":
                    # Iniciar processo de coleta de dados do cliente
                    self.coleta_dados_cliente[remetente] = {
                        "nome": "",
                        "telefone": "",
                        "etapa": "aguardando_nome",
                        "iniciado_em": time.time()
                    }
                    logger.info(f"üìù Iniciando coleta de dados do cliente para colaborador: {remetente}")
                
                # Confirma√ß√£o de atendimento do corretor (SIM)
                elif resultado_processamento["acao"] == "iniciar_atendimento_cliente":
                    logger.info(f"üöÄ Iniciando atendimento com cliente para corretor: {remetente}")
                    # Verificar se temos dados da coleta para este corretor
                    if remetente in self.coleta_dados_cliente:
                        dados_cliente = self.coleta_dados_cliente[remetente]
                        logger.info(f"üìã Dados do cliente encontrados: {dados_cliente}")
                        resultado_confirmacao = self.processar_confirmacao_atendimento_sim(remetente, dados_cliente)
                        logger.info(f"‚úÖ Resultado da confirma√ß√£o: {resultado_confirmacao}")
                        # N√£o retornar aqui, deixar continuar o fluxo normal
                    else:
                        logger.error(f"‚ùå Dados de coleta n√£o encontrados para corretor: {remetente}")
                        self.enviar_mensagem(remetente, "‚ùå Erro: Dados do cliente n√£o encontrados. Inicie uma nova coleta.")
                
                # Cancelamento de atendimento do corretor (N√ÉO)  
                elif resultado_processamento["acao"] == "encerrar_atendimento_corretor":
                    logger.info(f"‚ùå Encerrando atendimento para corretor: {remetente}")
                    resultado_cancelamento = self.processar_confirmacao_atendimento_nao(remetente)
                    logger.info(f"‚úÖ Resultado do cancelamento: {resultado_cancelamento}")
                    # N√£o retornar aqui, deixar continuar o fluxo normal
                
                # Cliente aceita atendimento (SIM)
                elif resultado_processamento["acao"] == "solicitar_cpf_cliente":
                    self.enviar_mensagem(remetente, "üìÑ *Para prosseguir, preciso do seu CPF:*\n\n(Somente n√∫meros, exemplo: 12345678901)")
                    logger.info(f"üìã Solicitando CPF para cliente: {remetente}")
                
                # Cliente recusa atendimento (N√ÉO)
                elif resultado_processamento["acao"] == "encerrar_atendimento_cliente":
                    # Limpar dados do atendimento
                    if remetente in self.atendimentos_cliente:
                        del self.atendimentos_cliente[remetente]
                    logger.info(f"‚ùå Cliente recusou atendimento: {remetente}")
                
                # LOG DETALHADO PARA MANUTEN√á√ÉO
                logger.info(f"üì§ Mensagem enviada para colaborador {remetente}: {mensagem_resposta[:50]}...")
                logger.info(f"üîÑ Pr√≥ximo passo definido: {resultado_processamento['proximo_passo']}")
                
                return {
                    "sucesso": True,
                    "tipo_usuario": "colaborador",
                    "acao_executada": resultado_processamento["acao"],
                    "proximo_passo": resultado_processamento["proximo_passo"],
                    "mensagem_enviada": mensagem_resposta,
                    "row_id_processado": row_id,
                    "ia_especializada_ativa": resultado_processamento["acao"] == "ativar_ia_especializada"
                }
                
            else:
                # ERRO NO PROCESSAMENTO DA RESPOSTA
                logger.warning(f"‚ö†Ô∏è Op√ß√£o n√£o reconhecida pelo colaborador: {row_id}")
                
                # Enviar mensagem de erro amig√°vel
                mensagem_erro = resultado_processamento.get("mensagem_resposta", 
                    "N√£o consegui processar sua escolha. Pode tentar novamente?")
                self.enviar_mensagem(remetente, mensagem_erro)
                
                return {
                    "sucesso": False,
                    "tipo_usuario": "colaborador", 
                    "erro": resultado_processamento.get("erro"),
                    "row_id_nao_reconhecido": row_id,
                    "mensagem_erro_enviada": mensagem_erro
                }
                
        except Exception as e:
            # TRATAMENTO DE ERRO CR√çTICO
            logger.error(f"‚ùå Erro cr√≠tico ao processar resposta de menu do colaborador: {str(e)}")
            logger.error(f"‚ùå Dados: remetente={remetente}, row_id={row_id}")
            
            # Enviar mensagem de erro t√©cnico
            mensagem_erro_tecnico = "Tive um problema t√©cnico ao processar sua escolha. Nossa equipe foi notificada."
            self.enviar_mensagem(remetente, mensagem_erro_tecnico)
            
            return {
                "sucesso": False,
                "tipo_usuario": "colaborador",
                "erro_critico": str(e),
                "row_id": row_id,
                "remetente": remetente,
                "mensagem_erro_enviada": mensagem_erro_tecnico
            }

    def processar_coleta_dados_cliente(self, remetente: str, mensagem: str, message_id: str = None) -> Dict[str, Any]:
        """
        Processa coleta de dados do cliente durante processo de fechamento
        
        Esta fun√ß√£o √© chamada quando um colaborador est√° em processo de coleta
        de dados (nome e telefone) de um cliente para fechamento de loca√ß√£o.
        
        Funcionalidades:
        - Valida dados usando GPT
        - Permite interrup√ß√µes limitadas (menu expl√≠cito, d√∫vidas com palavras interrogativas)
        - Controla etapas da coleta (nome ‚Üí telefone ‚Üí conclu√≠do)
        - Finaliza quando todos os dados s√£o coletados
        - Evita falsos positivos (nomes n√£o s√£o tratados como d√∫vidas)
        
        Args:
            remetente (str): N√∫mero do telefone do colaborador
            mensagem (str): Resposta do colaborador
            message_id (str): ID da mensagem (opcional)
            
        Returns:
            Dict: Resultado do processamento da coleta
        """
        try:
            # Marcar mensagem como lida
            if message_id:
                self.marcar_como_lida(remetente, message_id)
            
            # Obter dados da coleta em andamento
            dados_coleta = self.coleta_dados_cliente[remetente]
            etapa_atual = dados_coleta["etapa"]
            
            logger.info(f"üìù Processando coleta - Etapa: {etapa_atual}, Mensagem: {mensagem[:50]}...")
            
            # ====================================================================
            # VERIFICAR INTERRUP√á√ïES (MENU OU D√öVIDAS EXPL√çCITAS)
            # ====================================================================
            # 
            # Durante a coleta, permitimos apenas interrup√ß√µes CLARAS:
            # - Menu: palavras como "menu", "op√ß√µes" com alta confian√ßa
            # - D√∫vidas: apenas perguntas EXPL√çCITAS com "?", "como", "o que", etc.
            # 
            # IMPORTANTE: "conversa_normal" N√ÉO √© mais tratada como d√∫vida!
            # Isso evita que nomes como "Andreia Robe" sejam interpretados como d√∫vidas.
            
            # Usar interpretador GPT para verificar se √© menu ou d√∫vida
            try:
                interpretacao = self.openai_service.interpretar_intencao_mensagem(mensagem, remetente)
                
                # Se solicitou menu
                if interpretacao.get("intencao") == "menu" and interpretacao.get("confianca", 0) >= 0.7:
                    logger.info(f"üìã Menu solicitado durante coleta por colaborador: {remetente}")
                    resultado_menu = self.menu_service.enviar_menu_opcoes_atendimento(remetente)
                    return {
                        "sucesso": True,
                        "interrupcao": "menu_enviado",
                        "coleta_pausada": True,
                        "etapa_atual": etapa_atual,
                        "mensagem_resposta": "Menu enviado. Digite novamente o dado solicitado para continuar a coleta."
                    }
                
                # Se fez pergunta/d√∫vida EXPL√çCITA (apenas d√∫vidas t√©cnicas claras)
                elif interpretacao.get("intencao") == "duvida_tecnica" and interpretacao.get("confianca", 0) >= 0.7:
                    # Verificar se realmente parece uma pergunta (cont√©m palavras interrogativas)
                    palavras_pergunta = ["como", "o que", "qual", "quando", "onde", "por que", "porque", "?", "ajuda", "d√∫vida", "duvida"]
                    mensagem_lower = mensagem.lower()
                    
                    # S√≥ tratar como d√∫vida se contiver palavras interrogativas claras
                    if any(palavra in mensagem_lower for palavra in palavras_pergunta):
                        logger.info(f"‚ùì D√∫vida t√©cnica expl√≠cita detectada durante coleta: {remetente}")
                        # Ativar IA especializada temporariamente
                        agora = time.time()
                        self.sessoes_ativas[remetente] = {
                            "tipo": "ia_especializada",
                            "dados_colaborador": None,
                            "ativado_em": agora,
                            "expira_em": agora + self.TIMEOUT_SESSAO,
                            "ultima_atividade": agora
                        }
                        self.enviar_mensagem(remetente, "ü§ñ IA Especializada Ativada!")
                        return self.processar_duvida_colaborador(remetente, mensagem, message_id)
                    else:
                        logger.info(f"üìù D√∫vida t√©cnica detectada, mas sem palavras interrogativas - continuando coleta")
                        # Continuar com valida√ß√£o normal se n√£o for pergunta clara
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro na interpreta√ß√£o durante coleta: {e}")
                # Continuar com valida√ß√£o normal se interpretador falhar
            
            # ====================================================================
            # PROCESSAR DADOS BASEADO NA ETAPA ATUAL
            # ====================================================================
            
            if etapa_atual == "aguardando_nome":
                # Validar nome do cliente
                logger.info(f"üë§ Validando nome do cliente: {mensagem}")
                validacao = self.openai_service.validar_dado_cliente("nome", mensagem)
                
                if validacao["valido"]:
                    # Nome v√°lido - salvar e solicitar telefone
                    dados_coleta["nome"] = validacao.get("valor_corrigido", mensagem)
                    dados_coleta["etapa"] = "aguardando_telefone"
                    
                    mensagem_resposta = f"""‚úÖ Nome registrado: *{dados_coleta['nome']}*

üìû Agora informe o telefone do cliente:
(Exemplo: 11999999999 ou (11) 99999-9999)"""
                    
                    self.enviar_mensagem(remetente, mensagem_resposta)
                    
                    logger.info(f"‚úÖ Nome v√°lido coletado: {dados_coleta['nome']}")
                    return {
                        "sucesso": True,
                        "etapa_concluida": "nome",
                        "proxima_etapa": "telefone",
                        "nome_coletado": dados_coleta['nome']
                    }
                
                else:
                    # Nome inv√°lido - solicitar novamente
                    motivo = validacao.get("motivo_erro", "Nome n√£o parece v√°lido")
                    sugestao = validacao.get("sugestao", "Tente novamente")
                    
                    mensagem_erro = f"""‚ùå {motivo}

üí° {sugestao}

*Por favor, informe o nome completo do cliente:*"""
                    
                    self.enviar_mensagem(remetente, mensagem_erro)
                    
                    logger.warning(f"‚ùå Nome inv√°lido rejeitado: {mensagem}")
                    return {
                        "sucesso": False,
                        "erro": "nome_invalido",
                        "motivo": motivo,
                        "etapa_atual": "aguardando_nome"
                    }
            
            elif etapa_atual == "aguardando_telefone":
                # Validar telefone do cliente
                logger.info(f"üìû Validando telefone do cliente: {mensagem}")
                validacao = self.openai_service.validar_dado_cliente("telefone", mensagem)
                
                if validacao["valido"]:
                    # Telefone v√°lido - finalizar coleta
                    dados_coleta["telefone"] = validacao.get("valor_corrigido", mensagem)
                    dados_coleta["etapa"] = "concluido"
                    dados_coleta["concluido_em"] = time.time()
                    
                    mensagem_final = f"""‚úÖ *Dados do cliente coletados com sucesso!*

üë§ *Nome:* {dados_coleta['nome']}
üìû *Telefone:* {dados_coleta['telefone']}"""
                    
                    self.enviar_mensagem(remetente, mensagem_final)
                    
                    # Aguardar um momento e enviar menu de confirma√ß√£o
                    time.sleep(2)
                    
                    # Enviar menu de confirma√ß√£o personalizado
                    resultado_menu = self.menu_service.enviar_menu_confirmacao_atendimento(
                        remetente, 
                        dados_coleta['nome']
                    )
                    
                    if resultado_menu.get("sucesso"):
                        logger.info(f"‚úÖ Menu de confirma√ß√£o enviado para corretor {remetente}")
                    else:
                        logger.warning(f"‚ö†Ô∏è Falha ao enviar menu, enviando pergunta simples")
                        self.enviar_mensagem(remetente, "üöÄ Posso seguir com o Atendimento ao Cliente? (Responda Sim ou N√£o)")
                    
                    logger.info(f"üéâ Coleta conclu√≠da para colaborador {remetente}")
                    logger.info(f"üìã Dados coletados: Nome={dados_coleta['nome']}, Tel={dados_coleta['telefone']}")
                    
                    return {
                        "sucesso": True,
                        "coleta_concluida": True,
                        "dados_cliente": {
                            "nome": dados_coleta['nome'],
                            "telefone": dados_coleta['telefone']
                        },
                        "colaborador": remetente,
                        "tempo_coleta": dados_coleta['concluido_em'] - dados_coleta['iniciado_em'],
                        "menu_confirmacao_enviado": resultado_menu.get("sucesso", False)
                    }
                
                else:
                    # Telefone inv√°lido - solicitar novamente
                    motivo = validacao.get("motivo_erro", "Telefone n√£o parece v√°lido")
                    sugestao = validacao.get("sugestao", "Tente novamente")
                    
                    mensagem_erro = f"""‚ùå {motivo}

üí° {sugestao}

*Por favor, informe o telefone do cliente:*
(Exemplo: 11999999999 ou (11) 99999-9999)"""
                    
                    self.enviar_mensagem(remetente, mensagem_erro)
                    
                    logger.warning(f"‚ùå Telefone inv√°lido rejeitado: {mensagem}")
                    return {
                        "sucesso": False,
                        "erro": "telefone_invalido",
                        "motivo": motivo,
                        "etapa_atual": "aguardando_telefone"
                    }
            
            else:
                # Etapa n√£o reconhecida
                logger.error(f"‚ùå Etapa de coleta n√£o reconhecida: {etapa_atual}")
                return {
                    "sucesso": False,
                    "erro": "etapa_invalida",
                    "etapa_atual": etapa_atual
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar coleta de dados: {str(e)}")
            # Enviar mensagem de erro
            self.enviar_mensagem(remetente, "‚ùå Erro t√©cnico na coleta. Tente novamente.")
            return {
                "sucesso": False,
                "erro_critico": str(e),
                "etapa_atual": dados_coleta.get("etapa", "desconhecida")
            }

    def processar_duvida_colaborador(self, remetente: str, duvida: str, message_id: str = None) -> Dict[str, Any]:
        """
        Processa d√∫vidas de colaboradores quando a IA especializada est√° ativa
        
        Esta fun√ß√£o √© chamada quando um colaborador tem a IA especializada ativada
        e envia uma pergunta relacionada a processos de loca√ß√£o.
        
        Args:
            remetente (str): N√∫mero do telefone do colaborador
            duvida (str): Pergunta/d√∫vida do colaborador
            message_id (str): ID da mensagem (opcional)
            
        Returns:
            Dict: Resultado do processamento da d√∫vida
        """
        try:
            # Marcar mensagem como lida
            if message_id:
                self.marcar_como_lida(remetente, message_id)
            
            logger.info(f"ü§ñ Processando d√∫vida de colaborador: {remetente}")
            logger.info(f"üí≠ D√∫vida: {duvida[:100]}...")
            
            # Obter dados do colaborador se dispon√≠vel
            contexto_colaborador = self.sessoes_ativas[remetente].get("dados_colaborador")
            
            # Usar o OpenAI Service para processar a d√∫vida
            resultado_ia = self.openai_service.responder_duvida_locacao(
                duvida=duvida,
                contexto_colaborador=contexto_colaborador
            )
            
            if resultado_ia["sucesso"]:
                # RESPOSTA DA IA GERADA COM SUCESSO
                resposta_formatada = f"""ü§ñ *IA Especializada Responde:*

{resultado_ia['resposta']}

üìä *Categoria:* {resultado_ia['categoria'].title()}
üéØ *Confian√ßa:* {resultado_ia['confianca'].title()}"""
                
                # Adicionar sugest√µes extras se existirem
                if resultado_ia.get('sugestoes_extras') and len(resultado_ia['sugestoes_extras']) > 0:
                    resposta_formatada += "\n\nüí° *Sugest√µes adicionais:*"
                    for i, sugestao in enumerate(resultado_ia['sugestoes_extras'], 1):
                        resposta_formatada += f"\n{i}. {sugestao}"
                
                # Adicionar instru√ß√£o para continuar
                resposta_formatada += "\n\n‚ùì *Posso esclarecer mais alguma d√∫vida sobre loca√ß√£o?*"
                
                # Enviar resposta ao colaborador
                self.enviar_mensagem(remetente, resposta_formatada)
                
                # Atualizar √∫ltima intera√ß√£o na sess√£o
                if remetente in self.sessoes_ativas:
                    self.sessoes_ativas[remetente]["ultima_interacao"] = duvida
                
                # LOGS DETALHADOS
                logger.info(f"‚úÖ D√∫vida processada com sucesso - Categoria: {resultado_ia['categoria']}")
                logger.info(f"üì§ Resposta enviada para colaborador: {remetente}")
                
                return {
                    "sucesso": True,
                    "tipo_resposta": "ia_especializada",
                    "categoria_duvida": resultado_ia['categoria'],
                    "confianca": resultado_ia['confianca'],
                    "resposta_enviada": resposta_formatada,
                    "sugestoes_enviadas": len(resultado_ia.get('sugestoes_extras', [])),
                    "colaborador": resultado_ia.get('colaborador'),
                    "setor": resultado_ia.get('setor')
                }
                
            else:
                # ERRO NO PROCESSAMENTO DA IA
                logger.error(f"‚ùå Erro na IA especializada: {resultado_ia.get('erro')}")
                
                # Enviar mensagem de erro amig√°vel
                mensagem_erro = f"""ü§ñ Desculpe, tive dificuldade para processar sua d√∫vida.

{resultado_ia['resposta']}

üí° Voc√™ pode:
‚Ä¢ Reformular a pergunta de forma mais espec√≠fica
‚Ä¢ Perguntar sobre temas como: documentos, contratos, processos
‚Ä¢ Tentar novamente em alguns instantes

‚ùì Como posso ajudar voc√™?"""
                
                self.enviar_mensagem(remetente, mensagem_erro)
                
                return {
                    "sucesso": False,
                    "tipo_resposta": "ia_especializada_erro",
                    "erro": resultado_ia.get('erro'),
                    "mensagem_erro_enviada": mensagem_erro,
                    "duvida_original": duvida[:100]
                }
                
        except Exception as e:
            # ERRO CR√çTICO NO PROCESSAMENTO
            logger.error(f"‚ùå Erro cr√≠tico ao processar d√∫vida do colaborador: {str(e)}")
            
            # Enviar mensagem de erro t√©cnico
            mensagem_erro_critico = """ü§ñ Tive um problema t√©cnico ao processar sua d√∫vida.

Nossa equipe foi notificada e est√° resolvendo.

üí° Enquanto isso, voc√™ pode:
‚Ä¢ Tentar reformular a pergunta
‚Ä¢ Aguardar alguns minutos e tentar novamente
‚Ä¢ Entrar em contato com suporte t√©cnico

Pe√ßo desculpas pelo inconveniente! üôè"""
            
            self.enviar_mensagem(remetente, mensagem_erro_critico)
            
            return {
                "sucesso": False,
                "tipo_resposta": "erro_critico",
                "erro_critico": str(e),
                "mensagem_erro_enviada": mensagem_erro_critico,
                "duvida_original": duvida,
                "remetente": remetente
            }

    def processar_confirmacao_atendimento_sim(self, corretor: str, dados_cliente: Dict[str, Any]) -> Dict[str, Any]:
        """
        Processa confirma√ß√£o SIM do corretor para iniciar atendimento com cliente
        
        Args:
            corretor (str): Telefone do corretor
            dados_cliente (Dict): Dados coletados do cliente (nome, telefone)
            
        Returns:
            Dict: Resultado do processamento
        """
        try:
            # Obter dados do corretor se dispon√≠vel
            corretor_nome = "Corretor da Toca Im√≥veis"  # Padr√£o se n√£o encontrar
            
            # Tentar obter nome do corretor do banco de dados
            try:
                from .buscar_usuarios_supabase import identificar_tipo_usuario
                # TODO: Implementar busca espec√≠fica do nome do corretor
                # Por enquanto, usar nome padr√£o mais profissional
                logger.info(f"üìã Usando nome padr√£o para corretor: {corretor_nome}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel obter nome do corretor: {e}")
            
            # Converter telefone do cliente para formato para verifica√ß√£o
            telefone_cliente = dados_cliente.get('telefone', '')
            
            # Limpar telefone (remover par√™nteses, h√≠fens, espa√ßos)
            telefone_limpo = ''.join(filter(str.isdigit, telefone_cliente))
            
            logger.info(f"üîç Verificando se cliente {dados_cliente['nome']} tem WhatsApp: {telefone_limpo}")
            
            # Verificar se o cliente tem WhatsApp
            verificacao = self.verificar_numero_tem_whatsapp(telefone_limpo)
            
            if not verificacao.get("sucesso"):
                # Erro na verifica√ß√£o
                self.enviar_mensagem(corretor, f"‚ùå Erro ao verificar WhatsApp do cliente. Tente novamente.")
                return {"sucesso": False, "erro": "erro_verificacao_whatsapp"}
            
            if not verificacao.get("existe"):
                # Cliente n√£o tem WhatsApp
                mensagem_erro = f"""‚ùå *Cliente n√£o possui WhatsApp ativo*

üë§ *Nome:* {dados_cliente['nome']}
üìû *Telefone:* {telefone_cliente}

üí° *Sugest√µes:*
‚Ä¢ Confirme se o n√∫mero est√° correto
‚Ä¢ Entre em contato por outro meio
‚Ä¢ Solicite o WhatsApp atualizado do cliente"""
                
                self.enviar_mensagem(corretor, mensagem_erro)
                logger.warning(f"‚ùå Cliente sem WhatsApp: {telefone_limpo}")
                return {"sucesso": False, "erro": "cliente_sem_whatsapp"}
            
            # Cliente TEM WhatsApp - prosseguir
            logger.info(f"‚úÖ Cliente tem WhatsApp, iniciando contato: {telefone_limpo}")
            
            # Salvar dados do atendimento
            self.atendimentos_cliente[corretor] = {
                "cliente_nome": dados_cliente['nome'],
                "cliente_telefone": verificacao["numero"],  # N√∫mero formatado da API
                "corretor_nome": corretor_nome,
                "status": "aguardando_confirmacao_cliente",
                "iniciado_em": time.time()
            }
            
            # Enviar mensagem inicial para o cliente
            mensagem_cliente = f"""üè† *Ol√° {dados_cliente['nome']}!*

Sou a Bia, assistente virtual da *Toca Im√≥veis*.

O corretor *{corretor_nome}* solicitou iniciar o processo de *fechamento de loca√ß√£o* com voc√™.

Deseja prosseguir com o atendimento?"""
            
            # Enviar mensagem ao cliente
            resultado_msg = self.enviar_mensagem(verificacao["numero"], mensagem_cliente)
            
            if resultado_msg.get("sucesso"):
                # Aguardar um momento e enviar menu de confirma√ß√£o
                time.sleep(3)
                
                # Enviar menu de confirma√ß√£o ao cliente
                resultado_menu = self.menu_service.enviar_menu_confirmacao_cliente(
                    verificacao["numero"], 
                    corretor_nome
                )
                
                if resultado_menu.get("sucesso"):
                    # Confirmar ao corretor
                    confirmacao_corretor = f"""‚úÖ *Contato iniciado com sucesso!*

üë§ *Cliente:* {dados_cliente['nome']}
üìû *WhatsApp:* {telefone_cliente}

üöÄ *Mensagem enviada ao cliente aguardando resposta...*

üìã *Status:* Aguardando confirma√ß√£o do cliente"""
                    
                    self.enviar_mensagem(corretor, confirmacao_corretor)
                    
                    # Limpar dados da coleta (j√° processados)
                    if corretor in self.coleta_dados_cliente:
                        del self.coleta_dados_cliente[corretor]
                    
                    logger.info(f"‚úÖ Atendimento iniciado: {corretor} ‚Üí {dados_cliente['nome']}")
                    
                    return {
                        "sucesso": True,
                        "acao": "atendimento_iniciado",
                        "cliente_contatado": True,
                        "menu_enviado": True,
                        "dados_atendimento": self.atendimentos_cliente[corretor]
                    }
                
                else:
                    # Falha no menu - usar mensagem simples
                    logger.warning(f"‚ö†Ô∏è Falha no menu do cliente, enviando pergunta simples")
                    self.enviar_mensagem(verificacao["numero"], 
                        "Por favor, responda: Deseja prosseguir com o atendimento?\n\n‚úÖ Digite *Sim* para continuar\n‚ùå Digite *N√£o* para cancelar")
                    
                    # Confirmar ao corretor mesmo assim
                    self.enviar_mensagem(corretor, "‚úÖ Cliente contatado! Aguardando resposta...")
                    return {"sucesso": True, "acao": "atendimento_iniciado", "menu_enviado": False}
            
            else:
                # Falha ao enviar mensagem
                self.enviar_mensagem(corretor, f"‚ùå Erro ao enviar mensagem para o cliente. Verifique o n√∫mero.")
                return {"sucesso": False, "erro": "falha_envio_mensagem"}
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar confirma√ß√£o SIM: {str(e)}")
            self.enviar_mensagem(corretor, "‚ùå Erro t√©cnico. Nossa equipe foi notificada.")
            return {"sucesso": False, "erro_critico": str(e)}

    def processar_confirmacao_atendimento_nao(self, corretor: str) -> Dict[str, Any]:
        """
        Processa confirma√ß√£o N√ÉO do corretor (cancelar atendimento)
        
        Args:
            corretor (str): Telefone do corretor
            
        Returns:
            Dict: Resultado do processamento
        """
        try:
            logger.info(f"‚ùå Corretor cancelou atendimento: {corretor}")
            
            # Limpar dados da coleta se existir
            if corretor in self.coleta_dados_cliente:
                dados_cliente = self.coleta_dados_cliente[corretor]
                logger.info(f"üóëÔ∏è Limpando dados da coleta: {dados_cliente['nome']}")
                del self.coleta_dados_cliente[corretor]
            
            # Limpar sess√£o IA se ativa
            if corretor in self.sessoes_ativas:
                logger.info(f"üóëÔ∏è Encerrando sess√£o IA do corretor: {corretor}")
                del self.sessoes_ativas[corretor]
            
            # Log da opera√ß√£o
            logger.info(f"‚úÖ Atendimento encerrado e dados limpos para: {corretor}")
            
            return {
                "sucesso": True,
                "acao": "atendimento_cancelado",
                "dados_limpos": True,
                "sessao_encerrada": True
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar cancelamento: {str(e)}")
            return {"sucesso": False, "erro_critico": str(e)} 