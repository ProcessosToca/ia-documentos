import os
import re
from typing import Dict, Any, Optional
import logging
from .openai_service import OpenAIService
from .buscar_usuarios_supabase import identificar_tipo_usuario
from .menu_service_whatsapp import MenuServiceWhatsApp
from .whatsapp_api import WhatsAppAPI
from .session_manager import SessionManager
import time

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class WhatsAppService:
    """
    Servi√ßo para integra√ß√£o com W-API do WhatsApp
    
    FUNCIONALIDADES PRINCIPAIS:
    ==========================
    
    1. IDENTIFICA√á√ÉO DE USU√ÅRIOS:
       - Processa CPF via OpenAI
       - Identifica se √© colaborador ou cliente
       - Direciona para fluxos espec√≠ficos
    
    2. FLUXO DIFERENCIADO POR TIPO:
       - COLABORADORES: Recebem menu de op√ß√µes (IA + Fechamento)
       - CLIENTES: Mant√™m fluxo original (LGPD + Documentos)
    
    3. MENUS INTERATIVOS:
       - Integra√ß√£o com MenuServiceWhatsApp
       - Processamento de respostas de menu
       - Tratamento de erros robusto
    
    4. COMUNICA√á√ÉO:
       - Envio de mensagens
       - Marca√ß√£o como lida
       - Processamento de webhooks
    
    MANUTEN√á√ÉO:
    ===========
    - Logs detalhados em todas as opera√ß√µes
    - Tratamento de exce√ß√µes em cada fun√ß√£o
    - Coment√°rios explicativos para futuras altera√ß√µes
    - Fallbacks para quando menus falham
    
    VERS√ÉO: 2.0 (Adicionado suporte a menus para colaboradores)
    DATA: JUlho/2025
    """
    
    def __init__(self):
        # MODULARIZA√á√ÉO: Inicializar m√≥dulos especializados
        # =================================================
        
        # M√≥dulo de comunica√ß√£o com WhatsApp API
        self.whatsapp_api = WhatsAppAPI()
        
        # M√≥dulo de gest√£o de sess√µes ativas
        self.session_manager = SessionManager(timeout_sessao=30 * 60)  # 30 minutos
        
        # Inicializar OpenAI Service
        self.openai_service = OpenAIService()
        
        # Inicializar Menu Service para WhatsApp
        # Este servi√ßo gerencia menus interativos enviados aos usu√°rios
        self.menu_service = MenuServiceWhatsApp()
        
        # NOVO: ConversationLogger para captura de conversas (OPCIONAL)
        # =============================================================
        try:
            from .conversation_logger import ConversationLogger
            self.conversation_logger = ConversationLogger()
            self.logging_enabled = True
            logger.info("üóÇÔ∏è ConversationLogger ativado")
        except Exception as e:
            self.conversation_logger = None
            self.logging_enabled = False
            logger.warning(f"‚ö†Ô∏è ConversationLogger n√£o dispon√≠vel: {e}")
        
        # NOVO: Servi√ßos de Consentimento e Coleta Expandida (OPCIONAL)
        # =============================================================
        try:
            from .consentimento_service import ConsentimentoService
            self.consentimento_service = ConsentimentoService()
            logger.info("‚úÖ ConsentimentoService inicializado")
        except Exception as e:
            self.consentimento_service = None
            logger.warning(f"‚ö†Ô∏è ConsentimentoService n√£o dispon√≠vel: {e}")
        
        try:
            from .coleta_dados_service import ColetaDadosService
            self.coleta_dados_service = ColetaDadosService()
            logger.info("‚úÖ ColetaDadosService inicializado")
        except Exception as e:
            self.coleta_dados_service = None
            logger.warning(f"‚ö†Ô∏è ColetaDadosService n√£o dispon√≠vel: {e}")
        
        # FLAG de controle para ativar/desativar novo fluxo (SEM QUEBRAR NADA)
        self.fluxo_expandido_ativo = True
        
        # COMPATIBILIDADE: Manter refer√™ncias diretas para n√£o quebrar c√≥digo existente
        # ============================================================================
        # Note: As propriedades @property s√£o definidas na classe, n√£o no __init__
        
        # Sistema de coleta de dados do cliente para fechamento
        # Formato: {telefone_colaborador: {"nome": "", "telefone": "", "etapa": "aguardando_nome|aguardando_telefone|concluido"}}
        self.coleta_dados_cliente = {}
        
        # Sistema de atendimentos iniciados com clientes
        # Formato: {telefone_corretor: {"cliente_nome": "", "cliente_telefone": "", "corretor_nome": "", "status": "..."}}
        self.atendimentos_cliente = {}
        
        logger.info(f"WhatsApp Service inicializado com arquitetura modular")
        logger.info("üîß M√≥dulos ativos: WhatsAppAPI + SessionManager + MenuService")
        logger.info("‚úÖ Compatibilidade mantida - todas as funcionalidades preservadas")

    # PROPRIEDADES DE COMPATIBILIDADE
    # ================================
    # Estas propriedades redirecionam para os m√≥dulos apropriados
    # mantendo a compatibilidade com c√≥digo existente
    
    @property
    def sessoes_ativas(self):
        """Redireciona para SessionManager.sessoes_ativas (compatibilidade)"""
        return self.session_manager.sessoes_ativas
    
    @property  
    def TIMEOUT_SESSAO(self):
        """Redireciona para SessionManager.TIMEOUT_SESSAO (compatibilidade)"""
        return self.session_manager.TIMEOUT_SESSAO

    def verificar_numero_tem_whatsapp(self, numero_telefone: str) -> Dict[str, Any]:
        """
        Verifica se um n√∫mero de telefone possui WhatsApp ativo
        
        MODULARIZADO: Esta fun√ß√£o agora usa WhatsAppAPI
        
        Args:
            numero_telefone (str): N√∫mero no formato brasileiro (ex: 5511999999999)
            
        Returns:
            Dict: {"existe": bool, "numero": str, "sucesso": bool}
        """
        # Redirecionar para o m√≥dulo WhatsAppAPI
        return self.whatsapp_api.verificar_numero_tem_whatsapp(numero_telefone)
        
        # IMPORTANTE PARA MANUTEN√á√ÉO:
        # ===========================
        # 
        # FLUXO DE USO DA NOVA FUNCIONALIDADE:
        # 
        # 1. Usu√°rio envia CPF
        # 2. Sistema identifica se √© colaborador ou cliente
        # 3. Se COLABORADOR: 
        #    - Envia mensagem de boas-vindas
        #    - Aguarda 3 segundos
        #    - Envia menu com op√ß√µes: "Usar IA" e "Iniciar Fechamento"
        # 4. Se CLIENTE:
        #    - Mant√©m fluxo original (sem altera√ß√µes)
        # 
        # PARA PROCESSAR RESPOSTAS DE MENU:
        # - Use a fun√ß√£o: processar_resposta_menu_colaborador()
        # - Passe o row_id recebido do webhook
        # 
                 # C√ìDIGOS DE ROW_ID DISPON√çVEIS:
         # - "usar_ia_duvidas" ‚Üí Ativa chat com IA
         # - "iniciar_fechamento" ‚Üí Inicia processo de fechamento

    def identificar_tipo_usuario_rapido(self, remetente: str) -> str:
        """
        Identifica√ß√£o r√°pida do tipo de usu√°rio para processamento de inten√ß√µes
        
        Esta fun√ß√£o faz uma verifica√ß√£o b√°sica para determinar se o usu√°rio
        √© colaborador ou cliente, sem fazer consultas pesadas ao banco.
        
        Args:
            remetente (str): N√∫mero do telefone do usu√°rio
            
        Returns:
            str: "colaborador" | "cliente" | "desconhecido"
            
        Nota:
            - Verifica primeiro se existe sess√£o ativa (colaborador)
            - Futuramente pode consultar cache de usu√°rios identificados
            - Em caso de d√∫vida, retorna "desconhecido" para continuar fluxo normal
        """
        try:
            # VERIFICA√á√ÉO 1: Se tem sess√£o ativa, √© colaborador
            if remetente in self.sessoes_ativas:
                return "colaborador"
            
            # VERIFICA√á√ÉO 2: Aqui poder√≠amos consultar cache de usu√°rios identificados
            # Por enquanto, retorna desconhecido para n√£o quebrar o fluxo
            # TODO: Implementar cache de identifica√ß√£o de usu√°rios
            
            logger.info(f"üîç Tipo de usu√°rio n√£o identificado rapidamente: {remetente}")
            return "desconhecido"
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro na identifica√ß√£o r√°pida de usu√°rio: {e}")
            return "desconhecido"

    def processar_intencao_interpretada(self, remetente: str, interpretacao: Dict[str, Any], message_id: str = None) -> Dict[str, Any]:
        """
        Processa inten√ß√µes detectadas pelo interpretador GPT
        
        Esta fun√ß√£o √© chamada quando o interpretador GPT detecta uma inten√ß√£o
        espec√≠fica (sauda√ß√£o ou menu) e executa a a√ß√£o apropriada.
        
        Args:
            remetente (str): N√∫mero do telefone do usu√°rio
            interpretacao (Dict): Resultado da an√°lise do GPT com inten√ß√£o detectada
            message_id (str, optional): ID da mensagem para marcar como lida
            
        Returns:
            Dict com resultado do processamento da inten√ß√£o
            
        Fluxo de processamento:
            - SAUDA√á√ÉO ‚Üí Primeira mensagem da Bia (solicita CPF)
            - MENU + Colaborador ‚Üí Menu de op√ß√µes de atendimento
            - MENU + Cliente ‚Üí [FUTURO] Menu do cliente
            - Outros casos ‚Üí Continua fluxo normal
        """
        try:
            intencao = interpretacao.get("intencao")
            confianca = interpretacao.get("confianca", 0.0)
            
            logger.info(f"üéØ Processando inten√ß√£o '{intencao}' com confian√ßa {confianca:.2f}")
            
            # Marcar mensagem como lida se fornecido
            if message_id:
                self.marcar_como_lida(remetente, message_id)
            
            # ====================================================================
            # PROCESSAMENTO DE SAUDA√á√ïES - Primeira mensagem da Bia
            # ====================================================================
            if intencao == "saudacao":
                logger.info(f"üëã Sauda√ß√£o detectada de: {remetente}")
                
                # Enviar primeira mensagem padr√£o da Bia
                resultado = self.primeira_mensagem(remetente, message_id)
                
                # Adicionar informa√ß√µes da interpreta√ß√£o para logs
                resultado.update({
                    "interpretacao_gpt": True,
                    "intencao_detectada": "saudacao",
                    "confianca_gpt": confianca,
                    "acao_executada": "primeira_mensagem_bia"
                })
                
                return resultado
            
            # ====================================================================
            # PROCESSAMENTO DE SOLICITA√á√ïES DE MENU
            # ====================================================================
            elif intencao == "menu":
                logger.info(f"üìã Solicita√ß√£o de menu detectada de: {remetente}")
                
                # Identificar tipo de usu√°rio para enviar menu apropriado
                tipo_usuario = self.identificar_tipo_usuario_rapido(remetente)
                
                # MENU PARA COLABORADORES - Implementado
                if tipo_usuario == "colaborador":
                    logger.info(f"üë®‚Äçüíº Enviando menu de colaborador para: {remetente}")
                    
                    # Enviar menu de op√ß√µes de atendimento existente
                    resultado_menu = self.menu_service.enviar_menu_opcoes_atendimento(remetente)
                    
                    if resultado_menu.get("sucesso"):
                        return {
                            "sucesso": True,
                            "interpretacao_gpt": True,
                            "intencao_detectada": "menu",
                            "tipo_usuario": "colaborador",
                            "acao_executada": "menu_colaborador_enviado",
                            "confianca_gpt": confianca,
                            "mensagem_resposta": "Menu de colaborador enviado com sucesso"
                        }
                    else:
                        # Fallback se menu falhar
                        logger.warning(f"‚ö†Ô∏è Falha ao enviar menu de colaborador")
                        self.enviar_mensagem(remetente, "Menu temporariamente indispon√≠vel. Como posso ajudar?")
                        return {
                            "sucesso": False,
                            "erro": "falha_envio_menu_colaborador",
                            "fallback_executado": True
                        }
                
                # MENU PARA CLIENTES - Futuro
                elif tipo_usuario == "cliente":
                    logger.info(f"üë• Menu de cliente solicitado (implementa√ß√£o futura): {remetente}")
                    
                    # TODO: Implementar menu espec√≠fico para clientes
                    # return self.menu_service.enviar_menu_cliente(remetente)
                    
                    # Por enquanto, apenas registra a solicita√ß√£o
                    return {
                        "sucesso": True,
                        "interpretacao_gpt": True,
                        "intencao_detectada": "menu",
                        "tipo_usuario": "cliente", 
                        "acao_executada": "menu_cliente_pendente",
                        "confianca_gpt": confianca,
                        "implementacao": "futura",
                        "mensagem_resposta": "Menu de cliente ser√° implementado em breve"
                    }
                
                # USU√ÅRIO DESCONHECIDO - Continuar fluxo normal
                else:
                    logger.info(f"‚ùì Menu solicitado por usu√°rio n√£o identificado: {remetente}")
                    return {
                        "bypass_fluxo": False,
                        "continuar_fluxo_normal": True,
                        "motivo": "usuario_nao_identificado"
                    }
            
            # ====================================================================
            # OUTRAS INTEN√á√ïES - Continuar fluxo normal
            # ====================================================================
            else:
                logger.info(f"üîÑ Inten√ß√£o '{intencao}' n√£o requer bypass, continuando fluxo normal")
                return {
                    "bypass_fluxo": False,
                    "continuar_fluxo_normal": True,
                    "intencao_detectada": intencao
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar inten√ß√£o interpretada: {str(e)}")
            # Em caso de erro, sempre continuar fluxo normal
            return {
                "bypass_fluxo": False,
                "continuar_fluxo_normal": True,
                "erro": str(e)
            }

    def sessao_ativa(self, telefone: str) -> bool:
        """
        Verifica se existe uma sess√£o ativa para o telefone e se n√£o expirou
        
        MODULARIZADO: Esta fun√ß√£o agora usa SessionManager
        
        Args:
            telefone (str): N√∫mero do telefone do colaborador
            
        Returns:
            bool: True se sess√£o ativa, False se n√£o existe ou expirou
        """
        # Redirecionar para o m√≥dulo SessionManager
        return self.session_manager.sessao_ativa(telefone)

    def enviar_mensagem(self, numero_telefone: str, mensagem: str) -> Dict[str, Any]:
        """
        Envia uma mensagem via W-API
        
        MODULARIZADO: Esta fun√ß√£o agora usa WhatsAppAPI
        
        Args:
            numero_telefone (str): N√∫mero do telefone no formato internacional
            mensagem (str): Texto da mensagem a ser enviada
            
        Returns:
            Dict: Resposta da API
        """
        # Redirecionar para o m√≥dulo WhatsAppAPI
        return self.whatsapp_api.enviar_mensagem(numero_telefone, mensagem)
    
    def marcar_como_lida(self, numero_telefone: str, message_id: str) -> Dict[str, Any]:
        """
        Marca uma mensagem como lida
        
        MODULARIZADO: Esta fun√ß√£o agora usa WhatsAppAPI
        
        Args:
            numero_telefone (str): N√∫mero do telefone
            message_id (str): ID da mensagem
            
        Returns:
            Dict: Resposta da API
        """
        # Redirecionar para o m√≥dulo WhatsAppAPI
        return self.whatsapp_api.marcar_como_lida(numero_telefone, message_id)
    
    def processar_webhook_mensagem(self, webhook_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Processa dados do webhook de mensagem recebida (Formato W-API)
        
        MODULARIZADO: Esta fun√ß√£o agora usa WhatsAppAPI
        
        Args:
            webhook_data (Dict): Dados do webhook da W-API
            
        Returns:
            Dict: Dados processados da mensagem
        """
        # Redirecionar para o m√≥dulo WhatsAppAPI
        return self.whatsapp_api.processar_webhook_mensagem(webhook_data)
    
    def primeira_mensagem(self, remetente: str, message_id: str = None) -> Dict[str, Any]:
        """
        Envia primeira mensagem da Bia Corretora de Loca√ß√£o
        
        Args:
            remetente (str): N√∫mero do remetente
            message_id (str): ID da mensagem (opcional para marcar como lida)
            
        Returns:
            Dict: Resultado do processamento
        """
        try:
            # Marcar mensagem como lida
            if message_id:
                self.marcar_como_lida(remetente, message_id)
            
            # Mensagem de boas-vindas da Bia
            mensagem = (
                "Ol√°! üëã\n\n"
                "Aqui √© a Bia, Corretora de Loca√ß√£o\n\n"
                "Para iniciarmos seu atendimento, por favor me envie seu CPF (apenas n√∫meros).\n\n"
                "Exemplo: 12345678901"
            )
            
            # Enviar mensagem
            resultado = self.enviar_mensagem(remetente, mensagem)
            
            return {
                "novo_usuario": True,
                "cpf": None,
                "solicitar_cpf": True,
                "mensagem_resposta": mensagem
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar primeira mensagem: {str(e)}")
            return {
                "novo_usuario": True,
                "cpf": None,
                "solicitar_cpf": True,
                "mensagem_resposta": "Erro ao enviar mensagem inicial"
            }
    
    def interpretar_mensagem_usuario(self, remetente: str, mensagem: str, message_id: str = None) -> Dict[str, Any]:
        """
        Interpreta mensagem do usu√°rio e determina pr√≥xima a√ß√£o
        
        Esta √© a fun√ß√£o CENTRAL de processamento de mensagens que:
        1. PRIMEIRO: Usa interpretador GPT para detectar inten√ß√µes (sauda√ß√µes, menu)
        2. SEGUNDO: Se n√£o for inten√ß√£o especial, segue fluxo original
        
        Funcionalidades implementadas:
        - üß† Interpretador inteligente GPT detecta sauda√ß√µes e solicita√ß√µes de menu
        - üëã Sauda√ß√µes autom√°ticas ‚Üí Primeira mensagem da Bia
        - üìã "Menu" de colaboradores ‚Üí Menu de op√ß√µes de atendimento
        - üìã "Menu" de clientes ‚Üí [FUTURO] Menu espec√≠fico do cliente
        - üîÑ Fallback seguro ‚Üí Se interpretador falhar, continua fluxo normal
        
        Args:
            remetente (str): N√∫mero do remetente
            mensagem (str): Mensagem do usu√°rio  
            message_id (str): ID da mensagem (opcional)
            
        Returns:
            Dict: Resultado do processamento
            
        Fluxo de prioridades:
            0. Interpretador GPT (sauda√ß√µes, menu)
            1. Identifica√ß√£o de CPF
            2. Sess√£o IA ativa (colaboradores)
            3. Novo usu√°rio
            4. Outras mensagens
        """
        try:
            # Marcar mensagem como lida
            if message_id:
                self.marcar_como_lida(remetente, message_id)
            
            # CAPTURA: Mensagem inicial do usu√°rio (se for colaborador)
            if self.logging_enabled and self.conversation_logger:
                try:
                    conversation_id = self.conversation_logger.get_active_conversation_id(remetente)
                    if conversation_id:
                        self.conversation_logger.add_message(conversation_id, "user", mensagem)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro na captura de mensagem inicial: {e}")
            
            # ====================================================================
            # PRIORIDADE 0: VERIFICAR SE √â COLABORADOR EM PROCESSO DE COLETA DE DADOS
            # =========================================================================
            # IMPORTANTE: Esta verifica√ß√£o deve ser ANTES do interpretador GPT para evitar
            # que telefones sejam interpretados como CPF durante a coleta!
            if remetente in self.coleta_dados_cliente and self.coleta_dados_cliente[remetente]["etapa"] != "concluido":
                logger.info(f"üìù Colaborador em processo de coleta detectado: {remetente}")
                return self.processar_coleta_dados_cliente(remetente, mensagem, message_id)
            
            # ====================================================================
            # PRIORIDADE 0.5: VERIFICAR SE √â CLIENTE EM PROCESSO DE COLETA EXPANDIDA
            # ======================================================================
            # NOVO: Verificar se cliente est√° em sess√£o de coleta de dados expandida
            if (self.fluxo_expandido_ativo and self.coleta_dados_service and 
                self.coleta_dados_service.obter_dados_sessao(remetente)):
                logger.info(f"üìã Cliente em processo de coleta expandida detectado: {remetente}")
                return self.processar_coleta_expandida_cliente(remetente, mensagem, message_id)
            
            # ====================================================================
            # PRIORIDADE 1: INTERPRETADOR INTELIGENTE GPT
            # ====================================================================
            # Usar novo interpretador para detectar inten√ß√µes antes de tudo
            try:
                logger.info("üß† Iniciando interpreta√ß√£o inteligente com GPT...")
                interpretacao = self.openai_service.interpretar_intencao_mensagem(mensagem, remetente)
                
                # Se GPT detectou inten√ß√£o espec√≠fica com alta confian√ßa
                if interpretacao.get("bypass_fluxo") and interpretacao.get("confianca", 0) >= 0.7:
                    logger.info(f"üéØ Inten√ß√£o detectada com alta confian√ßa: {interpretacao['intencao']}")
                    
                    # Processar a inten√ß√£o detectada
                    resultado_intencao = self.processar_intencao_interpretada(remetente, interpretacao, message_id)
                    
                    # Se processamento foi bem-sucedido, retornar resultado
                    if not resultado_intencao.get("continuar_fluxo_normal"):
                        logger.info("‚úÖ Inten√ß√£o processada com sucesso, finalizando")
                        return resultado_intencao
                    
                # Se chegou aqui, continuar com fluxo original
                logger.info("üîÑ Continuando com fluxo original ap√≥s interpreta√ß√£o GPT")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro no interpretador GPT, continuando fluxo normal: {e}")
                # Em caso de erro no interpretador, continuar normalmente
            
            # ====================================================================
            # FLUXO ORIGINAL PRESERVADO (SEM ALTERA√á√ïES!)
            # ====================================================================
            
            # Interpretar mensagem com OpenAI (fun√ß√£o original)
            resultado = self.openai_service.interpretar_mensagem(mensagem)
            logger.info(f"üîç Resultado da interpreta√ß√£o: {resultado}")
            
            # PRIORIDADE 2: Se encontrou CPF, processar imediatamente
            if resultado.get("cpf"):
                cpf = resultado["cpf"]
                logger.info(f"‚úÖ CPF recebido: {cpf}")
                
                # Identificar se √© corretor ou cliente
                identificacao = identificar_tipo_usuario(cpf)
                logger.info(f"üë§ Tipo de usu√°rio identificado: {identificacao}")
                
                # Usar apenas a mensagem da identifica√ß√£o
                mensagem_resposta = identificacao['mensagem']
                
                # FLUXO DIFERENCIADO BASEADO NO TIPO DE USU√ÅRIO
                # =================================================
                
                if identificacao["tipo"] == "colaborador":
                    # FLUXO PARA COLABORADORES/CORRETORES
                    # -----------------------------------
                    logger.info("üè¢ Usu√°rio identificado como COLABORADOR - Enviando menu de op√ß√µes")
                    
                    # NOVO: Iniciar captura de conversa (se habilitado)
                    conversation_id = None
                    if self.logging_enabled:
                        try:
                            conversation_id = self.conversation_logger.start_conversation(
                                remetente,
                                "em_andamento",  # Inicia em andamento, move depois
                                {
                                    "type": "broker",
                                    "name": identificacao.get("dados_usuario", {}).get("nome", "Corretor"),
                                    "phone": remetente,
                                    "cpf": cpf,
                                    "sector": identificacao.get("dados_usuario", {}).get("setor", "N/A")
                                }
                            )
                            logger.info(f"üóÇÔ∏è Conversa iniciada: {conversation_id}")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erro ao iniciar captura: {e}")
                    
                    # 1. Enviar mensagem de boas-vindas personalizada
                    self.enviar_mensagem(remetente, mensagem_resposta)
                    
                    # CAPTURA: Mensagem de boas-vindas da IA
                    if self.logging_enabled and self.conversation_logger and conversation_id:
                        try:
                            self.conversation_logger.add_message(conversation_id, "assistant", mensagem_resposta)
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erro na captura de boas-vindas: {e}")
                    
                    # 2. Aguardar 3 segundos para melhor experi√™ncia do usu√°rio
                    time.sleep(3)
                    
                    # 3. Enviar menu de op√ß√µes de atendimento espec√≠fico para corretores
                    # Este menu cont√©m: "Usar IA para D√∫vidas" e "Iniciar Fechamento Loca√ß√£o"
                    try:
                        resultado_menu = self.menu_service.enviar_menu_opcoes_atendimento(remetente)
                        if resultado_menu["sucesso"]:
                            logger.info("‚úÖ Menu de op√ß√µes enviado com sucesso para colaborador")
                        else:
                            logger.error(f"‚ùå Erro ao enviar menu: {resultado_menu.get('erro')}")
                    except Exception as e_menu:
                        logger.error(f"‚ùå Erro ao enviar menu de op√ß√µes: {str(e_menu)}")
                        # Fallback: enviar mensagem simples se menu falhar
                        self.enviar_mensagem(remetente, "Menu de op√ß√µes temporariamente indispon√≠vel. Digite sua d√∫vida que irei ajudar!")
                
                else:
                    # FLUXO PARA CLIENTES - MELHORADO COM VERIFICA√á√ÉO DE CONSENTIMENTO
                    # ----------------------------------------------------------------
                    logger.info("üë• Usu√°rio identificado como CLIENTE - Verificando consentimento LGPD")
                    
                    # NOVO FLUXO: Verificar consentimento LGPD e enviar menu de concord√¢ncia
                    if self.fluxo_expandido_ativo and self.consentimento_service and self.consentimento_service.is_enabled():
                        try:
                            # Verificar consentimento do cliente
                            resultado_consentimento = self.consentimento_service.verificar_status_consentimento(cpf)
                            logger.info(f"üîí Consentimento: {resultado_consentimento['mensagem']}")
                            
                            # Buscar dados do corretor que iniciou o atendimento
                            corretor_telefone = self._obter_corretor_da_sessao(remetente)
                            nome_cliente = self._obter_nome_cliente_da_sessao(corretor_telefone)
                            
                            if resultado_consentimento['pode_coletar_dados']:
                                # CLIENTE PODE FORNECER DADOS - Nova mensagem de prote√ß√£o + Menu LGPD
                                
                                # 1. Mensagem de prote√ß√£o de dados personalizada
                                mensagem_protecao = f"""üîí *Prote√ß√£o dos Seus Dados*

Ol√°{f' {nome_cliente}' if nome_cliente else ''}! 

Para prosseguir com seu atendimento de loca√ß√£o, precisamos coletar algumas informa√ß√µes pessoais adicionais.

*Seus dados ser√£o utilizados apenas para:*
‚úÖ Processamento da sua solicita√ß√£o de loca√ß√£o
‚úÖ Comunica√ß√£o sobre o andamento do processo  
‚úÖ Cumprimento de obriga√ß√µes legais

*Garantimos total seguran√ßa* conforme a Lei Geral de Prote√ß√£o de Dados (LGPD).

Voc√™ concorda com o tratamento dos seus dados pessoais?"""
                                
                                # 2. Enviar mensagem de prote√ß√£o
                                self.enviar_mensagem(remetente, mensagem_protecao)
                                time.sleep(3)
                                
                                # 3. Enviar menu de concord√¢ncia LGPD
                                try:
                                    resultado_menu = self.menu_service.enviar_menu_concordancia_dados(remetente)
                                    if resultado_menu["sucesso"]:
                                        logger.info(f"üìã Menu LGPD enviado para cliente: {remetente}")
                                        
                                        # Registrar estado de espera de concord√¢ncia
                                        if not hasattr(self, 'aguardando_lgpd'):
                                            self.aguardando_lgpd = {}
                                        self.aguardando_lgpd[remetente] = {
                                            'cpf': cpf,
                                            'corretor': corretor_telefone,
                                            'nome_cliente': nome_cliente,
                                            'timestamp': time.time()
                                        }
                                        
                                    else:
                                        logger.error(f"‚ùå Erro ao enviar menu LGPD: {resultado_menu.get('erro')}")
                                        # Fallback: fluxo original
                                        self.enviar_mensagem(remetente, mensagem_resposta)
                                        
                                except Exception as e_menu:
                                    logger.error(f"‚ùå Erro no menu LGPD: {e_menu}")
                                    # Fallback: fluxo original
                                    self.enviar_mensagem(remetente, mensagem_resposta)
                                
                            else:
                                # N√ÉO PODE COLETAR - Cliente j√° revogou consentimento
                                mensagem_bloqueio = self.consentimento_service.gerar_mensagem_para_cliente(resultado_consentimento)
                                self.enviar_mensagem(remetente, mensagem_bloqueio)
                                
                                # Notificar corretor sobre a situa√ß√£o
                                if corretor_telefone:
                                    mensagem_corretor = f"""‚ö†Ô∏è *Cliente com restri√ß√£o LGPD*

O cliente informou o CPF {cpf[:3]}***{cpf[-2:]} mas *revogou* seu consentimento para uso de dados pessoais.

N√£o foi poss√≠vel prosseguir com a coleta autom√°tica. Entre em contato diretamente para esclarecer a situa√ß√£o."""
                                    
                                    self.enviar_mensagem(corretor_telefone, mensagem_corretor)
                                    logger.info(f"üìû Corretor {corretor_telefone} notificado sobre restri√ß√£o LGPD")
                                
                                logger.warning(f"‚õî Coleta bloqueada por revoga√ß√£o de consentimento: {remetente}")
                                
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erro na verifica√ß√£o de consentimento: {e}")
                            # Fallback seguro: manter fluxo original
                            self.enviar_mensagem(remetente, mensagem_resposta)
                    
                    else:
                        # FLUXO ORIGINAL PRESERVADO (quando servi√ßos n√£o dispon√≠veis)
                        logger.info("üìÑ Fluxo original mantido - servi√ßos expandidos n√£o dispon√≠veis")
                        self.enviar_mensagem(remetente, mensagem_resposta)
                
                # FINALIZA√á√ÉO COMUM PARA AMBOS OS FLUXOS
                # ======================================
                
                # Adicionar tipo de usu√°rio ao resultado para logs/debug
                resultado["tipo_usuario"] = identificacao["tipo"]
                resultado["mensagem_resposta"] = mensagem_resposta
                
                # Log final da opera√ß√£o
                logger.info(f"‚úÖ Processamento completo para {identificacao['tipo']}: {remetente}")
                
                return resultado
            
            # PRIORIDADE 3: VERIFICAR SE √â COLABORADOR COM SESS√ÉO IA ATIVA 
            # =============================================================
            if self.sessao_ativa(remetente):
                logger.info(f"ü§ñ Colaborador com IA Especializada ativa detectado: {remetente}")
                return self.processar_duvida_colaborador(remetente, mensagem, message_id)
            
            # PRIORIDADE 4: Se for novo usu√°rio e N√ÉO tem CPF, enviar primeira mensagem
            if resultado.get("novo_usuario"):
                logger.info("üëã Novo usu√°rio detectado")
                return self.primeira_mensagem(remetente, message_id)
            
            # PRIORIDADE 5: Outras mensagens
            # Enviar resposta ao usu√°rio
            self.enviar_mensagem(remetente, resultado["mensagem_resposta"])
            
            return resultado
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao interpretar mensagem do usu√°rio: {str(e)}")
            return {
                "cpf": None,
                "novo_usuario": False,
                "solicitar_cpf": True,
                "mensagem_resposta": "Desculpe, tive um problema ao processar sua mensagem. Por favor, envie seu CPF novamente."
            }

    def _obter_corretor_da_sessao(self, cliente_telefone: str) -> Optional[str]:
        """
        Obt√©m o telefone do corretor que iniciou atendimento com este cliente
        
        Args:
            cliente_telefone (str): Telefone do cliente
            
        Returns:
            str ou None: Telefone do corretor se encontrado
        """
        try:
            # Buscar nos atendimentos ativos
            for corretor_telefone, dados in self.atendimentos_cliente.items():
                if dados.get("cliente_telefone") == cliente_telefone:
                    logger.info(f"üîç Corretor encontrado: {corretor_telefone} para cliente {cliente_telefone}")
                    return corretor_telefone
            
            # Buscar nas coletas de dados (corretor que coletou dados)
            for corretor_telefone, dados_coleta in self.coleta_dados_cliente.items():
                # Verificar se o telefone normalizado bate
                telefone_coleta = dados_coleta.get("telefone", "")
                # Extrair n√∫meros do telefone
                numeros_coleta = re.sub(r'\D', '', telefone_coleta)
                numeros_cliente = re.sub(r'\D', '', cliente_telefone)
                
                if numeros_coleta and numeros_cliente and numeros_coleta in numeros_cliente:
                    logger.info(f"üîç Corretor encontrado via coleta: {corretor_telefone} para cliente {cliente_telefone}")
                    return corretor_telefone
            
            logger.warning(f"‚ö†Ô∏è Corretor n√£o encontrado para cliente: {cliente_telefone}")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao buscar corretor: {e}")
            return None
    
    def _obter_nome_cliente_da_sessao(self, corretor_telefone: str) -> Optional[str]:
        """
        Obt√©m o nome do cliente da sess√£o do corretor
        
        Args:
            corretor_telefone (str): Telefone do corretor
            
        Returns:
            str ou None: Nome do cliente se encontrado
        """
        try:
            if not corretor_telefone:
                return None
            
            # Buscar nos dados de coleta do corretor
            if corretor_telefone in self.coleta_dados_cliente:
                nome = self.coleta_dados_cliente[corretor_telefone].get("nome", "")
                if nome:
                    logger.info(f"üë§ Nome do cliente encontrado: {nome[:10]}... para corretor {corretor_telefone}")
                    return nome
            
            # Buscar nos atendimentos
            if corretor_telefone in self.atendimentos_cliente:
                nome = self.atendimentos_cliente[corretor_telefone].get("cliente_nome", "")
                if nome:
                    logger.info(f"üë§ Nome do cliente encontrado via atendimento: {nome[:10]}...")
                    return nome
            
            logger.info(f"‚ö†Ô∏è Nome do cliente n√£o encontrado para corretor: {corretor_telefone}")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao buscar nome do cliente: {e}")
            return None

    def processar_coleta_expandida_cliente(self, remetente: str, mensagem: str, message_id: str = None) -> Dict[str, Any]:
        """
        Processa coleta expandida de dados do cliente (email, data nascimento, endere√ßo)
        
        Esta fun√ß√£o gerencia todo o fluxo de coleta de dados complementares:
        - E-mail com valida√ß√£o
        - Data de nascimento com valida√ß√£o de idade (18+)
        - CEP com busca autom√°tica via ViaCEP
        - Confirma√ß√£o de endere√ßo
        - N√∫mero e complemento
        
        Args:
            remetente (str): Telefone do cliente
            mensagem (str): Resposta do cliente
            message_id (str): ID da mensagem para marcar como lida
            
        Returns:
            Dict: Resultado do processamento
        """
        try:
            logger.info(f"üìã Processando coleta expandida - Cliente: {remetente}")
            
            # Marcar mensagem como lida
            if message_id:
                self.marcar_como_lida(remetente, message_id)
            
            # Processar resposta usando o servi√ßo de coleta
            resultado = self.coleta_dados_service.processar_resposta(remetente, mensagem)
            
            if resultado['sucesso']:
                logger.info(f"‚úÖ Etapa processada: {resultado.get('proxima_etapa', 'N/A')}")
                
                # Enviar mensagem de resposta
                if 'mensagem' in resultado:
                    self.enviar_mensagem(remetente, resultado['mensagem'])
                
                # Verificar se coleta foi finalizada
                if resultado.get('coleta_finalizada'):
                    logger.info(f"üéâ Coleta de dados finalizada para cliente: {remetente}")
                    
                    # Obter dados completos
                    dados_completos = resultado.get('dados_completos', {})
                    
                    # Limpar sess√£o de coleta
                    self.coleta_dados_service.limpar_sessao(remetente)
                    
                    # AQUI VOC√ä PODE ADICIONAR L√ìGICA PARA:
                    # - Salvar dados no Supabase
                    # - Transferir para corretor
                    # - Enviar para sistema de CRM
                    # - Etc.
                    
                    logger.info("üéØ Dados prontos para transfer√™ncia/salvamento")
                
                return {
                    "sucesso": True,
                    "etapa": resultado.get('proxima_etapa', 'processando'),
                    "mensagem_resposta": resultado.get('mensagem', 'Processado com sucesso'),
                    "dados_completos": resultado.get('coleta_finalizada', False)
                }
            
            else:
                # Erro no processamento
                logger.warning(f"‚ö†Ô∏è Erro na coleta: {resultado.get('erro', 'Erro desconhecido')}")
                
                # Verificar a√ß√µes especiais
                if resultado.get('acao') == 'transferir_atendente':
                    # Cliente rejeitou endere√ßo - transferir para atendente humano
                    logger.info(f"üë§ Transferindo cliente para atendente humano: {remetente}")
                    self.coleta_dados_service.limpar_sessao(remetente)
                    # Aqui voc√™ poderia implementar transfer√™ncia real
                
                elif resultado.get('acao') == 'idade_insuficiente':
                    # Cliente menor de 18 anos
                    logger.info(f"üîû Cliente menor de idade: {remetente}")
                    self.coleta_dados_service.limpar_sessao(remetente)
                
                elif resultado.get('acao') == 'reiniciar_coleta':
                    # Sess√£o perdida - limpar e reiniciar
                    logger.info(f"üîÑ Reiniciando coleta para: {remetente}")
                    self.coleta_dados_service.limpar_sessao(remetente)
                
                # Enviar mensagem de erro se dispon√≠vel
                if 'mensagem' in resultado:
                    self.enviar_mensagem(remetente, resultado['mensagem'])
                
                return {
                    "sucesso": False,
                    "erro": resultado.get('erro', 'Erro no processamento'),
                    "acao": resultado.get('acao', 'continuar'),
                    "mensagem_resposta": resultado.get('mensagem', 'Erro processado')
                }
            
        except Exception as e:
            logger.error(f"‚ùå Erro na coleta expandida: {e}")
            
            # Cleanup em caso de erro
            if self.coleta_dados_service:
                self.coleta_dados_service.limpar_sessao(remetente)
            
            # Mensagem de erro para o cliente
            mensagem_erro = """‚ùå *Erro interno*

Ocorreu um problema t√©cnico. Vou te transferir para um atendente.

üìû Ou entre em contato: *(14) 99999-9999*"""
            
            self.enviar_mensagem(remetente, mensagem_erro)
            
            return {
                "sucesso": False,
                "erro": f"Erro interno: {str(e)}",
                "mensagem_resposta": "Erro interno - cliente transferido"
            }

    def _processar_concordancia_lgpd_sim(self, remetente: str, row_id: str) -> Dict[str, Any]:
        """
        Processa quando cliente concorda com LGPD e inicia coleta expandida
        
        Args:
            remetente (str): Telefone do cliente
            row_id (str): ID da op√ß√£o selecionada
            
        Returns:
            Dict: Resultado do processamento
        """
        try:
            logger.info(f"‚úÖ Cliente concordou com LGPD: {remetente}")
            
            # Obter dados da sess√£o de espera
            dados_lgpd = None
            if hasattr(self, 'aguardando_lgpd') and remetente in self.aguardando_lgpd:
                dados_lgpd = self.aguardando_lgpd[remetente]
                del self.aguardando_lgpd[remetente]  # Limpar estado de espera
            
            if not dados_lgpd:
                logger.error(f"‚ùå Dados LGPD n√£o encontrados para {remetente}")
                return {
                    "sucesso": False,
                    "erro": "Sess√£o LGPD expirada",
                    "mensagem_resposta": "Sess√£o expirada. Por favor, informe seu CPF novamente."
                }
            
            cpf = dados_lgpd['cpf']
            corretor_telefone = dados_lgpd['corretor']
            nome_cliente = dados_lgpd['nome_cliente'] or "Cliente"
            
            # Mensagem de confirma√ß√£o personalizada
            mensagem_confirmacao = f"""‚úÖ *Concord√¢ncia Registrada*

Obrigado {nome_cliente}! Seus dados ser√£o tratados com total seguran√ßa.

üìã *Dados Adicionais Necess√°rios*

Para prosseguir com seu atendimento, preciso coletar algumas informa√ß√µes b√°sicas.

Vamos come√ßar:"""
            
            # Enviar mensagem de confirma√ß√£o
            self.enviar_mensagem(remetente, mensagem_confirmacao)
            time.sleep(2)
            
            # SALVAR CONSENTIMENTO NO SUPABASE
            if self.consentimento_service:
                try:
                    resultado_salvamento = self.consentimento_service.salvar_consentimento_lgpd(
                        client_cpf=cpf,
                        client_name=nome_cliente,
                        client_phone=remetente,
                        tipo_consentimento="complete",
                        consent_origin="whatsapp",
                        whatsapp_message_id=f"menu_lgpd_{int(time.time())}",
                        notes=f"Cliente concordou via menu LGPD - Row ID: {row_id}"
                    )
                    
                    if resultado_salvamento["success"]:
                        logger.info(f"üíæ Consentimento salvo no Supabase: {resultado_salvamento['action']} - Status: {resultado_salvamento['status']}")
                    else:
                        logger.warning(f"‚ö†Ô∏è Falha ao salvar consentimento: {resultado_salvamento['message']}")
                        
                except Exception as e_save:
                    logger.error(f"‚ùå Erro ao salvar consentimento: {e_save}")
            
            # INICIAR COLETA EXPANDIDA
            if self.coleta_dados_service:
                try:
                    # Inicializar sess√£o de coleta
                    dados_coleta = self.coleta_dados_service.iniciar_coleta(remetente, nome_cliente, cpf)
                    
                    # Solicitar primeiro dado: E-mail
                    mensagem_email = """üìß *Digite seu e-mail:*

Exemplo: seuemail@gmail.com"""
                    self.enviar_mensagem(remetente, mensagem_email)
                    
                    logger.info(f"üìã Coleta expandida iniciada ap√≥s concord√¢ncia LGPD: {remetente}")
                    
                    # Notificar corretor sobre o sucesso
                    if corretor_telefone:
                        mensagem_corretor = f"""‚úÖ *Cliente concordou com LGPD*

O cliente {nome_cliente} concordou com o tratamento de dados e a coleta autom√°tica foi iniciada.

üìã *Status*: Coletando dados adicionais automaticamente
üíæ *Consentimento*: Salvo no sistema automaticamente  
‚è∞ *Pr√≥ximo passo*: Aguardar finaliza√ß√£o da coleta"""
                        
                        self.enviar_mensagem(corretor_telefone, mensagem_corretor)
                        logger.info(f"üìû Corretor {corretor_telefone} notificado sobre concord√¢ncia")
                    
                    return {
                        "sucesso": True,
                        "acao": "coleta_iniciada",
                        "tipo_usuario": "cliente",
                        "mensagem_resposta": "Coleta expandida iniciada",
                        "dados_lgpd": dados_lgpd,
                        "row_id_processado": row_id,
                        "consentimento_salvo": True
                    }
                    
                except Exception as e:
                    logger.error(f"‚ùå Erro ao iniciar coleta expandida: {e}")
                    # Fallback: transferir para corretor
                    return self._transferir_para_corretor(remetente, corretor_telefone, nome_cliente, "erro_coleta")
            
            else:
                # Servi√ßo de coleta n√£o dispon√≠vel - transferir para corretor
                return self._transferir_para_corretor(remetente, corretor_telefone, nome_cliente, "servico_indisponivel")
            
        except Exception as e:
            logger.error(f"‚ùå Erro no processamento de concord√¢ncia LGPD: {e}")
            return {
                "sucesso": False,
                "erro": f"Erro interno: {str(e)}",
                "mensagem_resposta": "Erro interno - tente novamente"
            }

    def _processar_concordancia_lgpd_nao(self, remetente: str, row_id: str) -> Dict[str, Any]:
        """
        Processa quando cliente N√ÉO concorda com LGPD ou quer mais informa√ß√µes
        
        Args:
            remetente (str): Telefone do cliente
            row_id (str): ID da op√ß√£o selecionada
            
        Returns:
            Dict: Resultado do processamento
        """
        try:
            logger.info(f"‚ùå Cliente n√£o concordou com LGPD: {remetente} ({row_id})")
            
            # Obter dados da sess√£o de espera
            dados_lgpd = None
            if hasattr(self, 'aguardando_lgpd') and remetente in self.aguardando_lgpd:
                dados_lgpd = self.aguardando_lgpd[remetente]
                del self.aguardando_lgpd[remetente]  # Limpar estado de espera
            
            corretor_telefone = dados_lgpd.get('corretor') if dados_lgpd else None
            nome_cliente = dados_lgpd.get('nome_cliente', 'Cliente') if dados_lgpd else 'Cliente'
            
            # Mensagem para o cliente
            mensagem_cliente = """üìû *Atendimento Personalizado*

Entendo sua preocupa√ß√£o com a prote√ß√£o de dados.

Vou conectar voc√™ com um de nossos atendentes especializados que poder√° esclarecer todas suas d√∫vidas e prosseguir com seu atendimento de forma personalizada.

‚è∞ *Aguarde um momento...*"""
            
            self.enviar_mensagem(remetente, mensagem_cliente)
            
            # Notificar corretor sobre a recusa
            if corretor_telefone:
                if row_id == "mais_informacoes":
                    motivo = "solicitou mais informa√ß√µes sobre prote√ß√£o de dados"
                else:
                    motivo = "n√£o concordou com o tratamento de dados pessoais"
                
                mensagem_corretor = f"""‚ö†Ô∏è *Cliente necessita atendimento personalizado*

*Cliente*: {nome_cliente}
*Telefone*: {remetente}
*Situa√ß√£o*: O cliente {motivo}

üîí *LGPD*: N√£o foi poss√≠vel prosseguir com coleta autom√°tica

üìû *A√ß√£o necess√°ria*: Entre em contato direto para:
‚Ä¢ Esclarecer d√∫vidas sobre prote√ß√£o de dados
‚Ä¢ Explicar o processo de forma personalizada  
‚Ä¢ Coletar dados manualmente se cliente concordar

‚è∞ Cliente foi informado que receber√° atendimento personalizado."""
                
                self.enviar_mensagem(corretor_telefone, mensagem_corretor)
                logger.info(f"üìû Corretor {corretor_telefone} notificado sobre necessidade de atendimento personalizado")
            
            return {
                "sucesso": True,
                "acao": "atendimento_personalizado",
                "tipo_usuario": "cliente", 
                "mensagem_resposta": "Cliente direcionado para atendimento personalizado",
                "motivo": row_id,
                "corretor_notificado": corretor_telefone is not None,
                "row_id_processado": row_id
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro no processamento de recusa LGPD: {e}")
            return {
                "sucesso": False,
                "erro": f"Erro interno: {str(e)}",
                "mensagem_resposta": "Erro interno - tente novamente"
            }

    def _transferir_para_corretor(self, cliente_telefone: str, corretor_telefone: str, nome_cliente: str, motivo: str) -> Dict[str, Any]:
        """
        Transfere cliente para atendimento manual do corretor
        
        Args:
            cliente_telefone (str): Telefone do cliente
            corretor_telefone (str): Telefone do corretor
            nome_cliente (str): Nome do cliente
            motivo (str): Motivo da transfer√™ncia
            
        Returns:
            Dict: Resultado da transfer√™ncia
        """
        try:
            # Mensagem para o cliente
            mensagem_cliente = """üìû *Transferindo para Atendente*

Vou conectar voc√™ com um de nossos atendentes para prosseguir com seu atendimento de forma personalizada.

‚è∞ *Aguarde o contato...*"""
            
            self.enviar_mensagem(cliente_telefone, mensagem_cliente)
            
            # Mensagem para o corretor
            if corretor_telefone:
                motivos_amigaveis = {
                    "erro_coleta": "erro t√©cnico na coleta autom√°tica",
                    "servico_indisponivel": "servi√ßo de coleta temporariamente indispon√≠vel",
                    "sessao_expirada": "sess√£o de atendimento expirada"
                }
                
                motivo_amigavel = motivos_amigaveis.get(motivo, motivo)
                
                mensagem_corretor = f"""üîÑ *Transfer√™ncia de Cliente*

*Cliente*: {nome_cliente}
*Telefone*: {cliente_telefone}  
*Motivo*: {motivo_amigavel}

üìû *A√ß√£o necess√°ria*: Entre em contato direto para prosseguir com o atendimento manualmente.

‚è∞ Cliente foi informado sobre a transfer√™ncia."""
                
                self.enviar_mensagem(corretor_telefone, mensagem_corretor)
                logger.info(f"üìû Cliente transferido para corretor {corretor_telefone}")
            
            return {
                "sucesso": True,
                "acao": "transferencia_realizada",
                "motivo": motivo,
                "corretor_notificado": corretor_telefone is not None
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro na transfer√™ncia: {e}")
            return {
                "sucesso": False,
                "erro": f"Erro na transfer√™ncia: {str(e)}"
            }

    def processar_resposta_menu_colaborador(self, remetente: str, row_id: str, webhook_data: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Processa respostas de menus interativos especificamente para colaboradores
        
        Esta fun√ß√£o √© chamada quando um colaborador clica em uma op√ß√£o do menu
        enviado pelo sistema (ex: "Usar IA para D√∫vidas", "Iniciar Fechamento Loca√ß√£o")
        
        Args:
            remetente (str): N√∫mero do telefone do colaborador que respondeu
            row_id (str): ID da op√ß√£o selecionada no menu (ex: "usar_ia_duvidas")
            webhook_data (Dict, optional): Dados completos do webhook para contexto adicional
            
        Returns:
            Dict: Resultado do processamento com pr√≥xima a√ß√£o
            
        Exemplo de uso:
            resultado = service.processar_resposta_menu_colaborador(
                "5511999999999", 
                "usar_ia_duvidas"
            )
        """
        try:
            logger.info(f"üìã Processando resposta de menu do COLABORADOR: {remetente} ‚Üí {row_id}")
            
            # Usar o menu service para processar a resposta
            # O menu service cont√©m toda a l√≥gica de mapeamento de a√ß√µes
            resultado_processamento = self.menu_service.processar_resposta_menu(
                row_id=row_id,
                usuario_id=remetente,
                webhook_data=webhook_data
            )
            
            if resultado_processamento["sucesso"]:
                # RESPOSTA PROCESSADA COM SUCESSO
                logger.info(f"‚úÖ A√ß√£o identificada: {resultado_processamento['acao']}")
                
                # Enviar mensagem de resposta ao colaborador
                mensagem_resposta = resultado_processamento["mensagem_resposta"]
                self.enviar_mensagem(remetente, mensagem_resposta)
                
                # VERIFICAR A√á√ïES ESPECIAIS DOS COLABORADORES
                # ==========================================
                
                # Ativa√ß√£o da IA Especializada
                if resultado_processamento["acao"] == "ativar_ia_especializada":
                    # CAPTURA: Colaborador escolheu "Usar IA para D√∫vidas"
                    if self.logging_enabled and self.conversation_logger:
                        try:
                            conversation_id = self.conversation_logger.get_active_conversation_id(remetente)
                            if conversation_id:
                                self.conversation_logger.update_conversation_type(conversation_id, "duvidas")
                                self.conversation_logger.add_message(
                                    conversation_id, 
                                    "user", 
                                    f"Menu selecionado: Usar IA para D√∫vidas (row_id: {row_id})"
                                )
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erro na captura de menu d√∫vidas: {e}")
                    
                    # MODULARIZADO: Usar SessionManager para criar sess√£o
                    resultado_sessao = self.session_manager.criar_sessao_ia_especializada(
                        telefone=remetente,
                        dados_colaborador=None  # Ser√° preenchido quando necess√°rio
                    )
                    if resultado_sessao["sucesso"]:
                        logger.info(f"ü§ñ IA Especializada ATIVADA para colaborador: {remetente} (expira em {resultado_sessao['timeout_minutos']:.1f}min)")
                    else:
                        logger.error(f"‚ùå Erro ao criar sess√£o IA: {resultado_sessao.get('erro')}")
                
                # In√≠cio da coleta de dados do cliente
                elif resultado_processamento["acao"] == "coletar_nome_cliente":
                    # CAPTURA: Colaborador escolheu "Iniciar Fechamento Loca√ß√£o"
                    if self.logging_enabled and self.conversation_logger:
                        try:
                            conversation_id = self.conversation_logger.get_active_conversation_id(remetente)
                            if conversation_id:
                                self.conversation_logger.update_conversation_type(conversation_id, "em_andamento")
                                self.conversation_logger.add_message(
                                    conversation_id, 
                                    "user", 
                                    f"Menu selecionado: Iniciar Fechamento Loca√ß√£o (row_id: {row_id})"
                                )
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erro na captura de menu fechamento: {e}")
                    
                    # Iniciar processo de coleta de dados do cliente
                    self.coleta_dados_cliente[remetente] = {
                        "nome": "",
                        "telefone": "",
                        "etapa": "aguardando_nome",
                        "iniciado_em": time.time()
                    }
                    logger.info(f"üìù Iniciando coleta de dados do cliente para colaborador: {remetente}")
                
                # NOVO: Processamento de respostas do menu LGPD
                elif resultado_processamento["acao"] == "iniciar_processo_completo":
                    # Cliente concordou com tudo - iniciar coleta expandida
                    return self._processar_concordancia_lgpd_sim(remetente, "concordo_tudo")
                
                elif resultado_processamento["acao"] == "transferir_atendente":
                    # Cliente quer mais informa√ß√µes - notificar corretor
                    return self._processar_concordancia_lgpd_nao(remetente, "mais_informacoes")
                
                elif resultado_processamento["acao"] == "enviar_politica":
                    # Cliente quer ler pol√≠tica de privacidade - buscar link din√¢mico
                    self._enviar_politica_privacidade(remetente)
                    logger.info(f"üìÑ Pol√≠tica de privacidade enviada para: {remetente}")
                
                # Confirma√ß√£o de atendimento do corretor (SIM)
                elif resultado_processamento["acao"] == "iniciar_atendimento_cliente":
                    logger.info(f"üöÄ Iniciando atendimento com cliente para corretor: {remetente}")
                    # Verificar se temos dados da coleta para este corretor
                    if remetente in self.coleta_dados_cliente:
                        dados_cliente = self.coleta_dados_cliente[remetente]
                        logger.info(f"üìã Dados do cliente encontrados: {dados_cliente}")
                        resultado_confirmacao = self.processar_confirmacao_atendimento_sim(remetente, dados_cliente)
                        logger.info(f"‚úÖ Resultado da confirma√ß√£o: {resultado_confirmacao}")
                        # N√£o retornar aqui, deixar continuar o fluxo normal
                    else:
                        logger.error(f"‚ùå Dados de coleta n√£o encontrados para corretor: {remetente}")
                        self.enviar_mensagem(remetente, "‚ùå Erro: Dados do cliente n√£o encontrados. Inicie uma nova coleta.")
                
                # Cancelamento de atendimento do corretor (N√ÉO)  
                elif resultado_processamento["acao"] == "encerrar_atendimento_corretor":
                    logger.info(f"‚ùå Encerrando atendimento para corretor: {remetente}")
                    resultado_cancelamento = self.processar_confirmacao_atendimento_nao(remetente)
                    logger.info(f"‚úÖ Resultado do cancelamento: {resultado_cancelamento}")
                    # N√£o retornar aqui, deixar continuar o fluxo normal
                
                # Cliente aceita atendimento (SIM)
                elif resultado_processamento["acao"] == "solicitar_cpf_cliente":
                    self.enviar_mensagem(remetente, "üìÑ *Para prosseguir, preciso do seu CPF:*\n\n(Somente n√∫meros, exemplo: 12345678901)")
                    logger.info(f"üìã Solicitando CPF para cliente: {remetente}")
                
                # Cliente recusa atendimento (N√ÉO)
                elif resultado_processamento["acao"] == "encerrar_atendimento_cliente":
                    # Limpar dados do atendimento
                    if remetente in self.atendimentos_cliente:
                        del self.atendimentos_cliente[remetente]
                    logger.info(f"‚ùå Cliente recusou atendimento: {remetente}")
                
                # LOG DETALHADO PARA MANUTEN√á√ÉO
                logger.info(f"üì§ Mensagem enviada para colaborador {remetente}: {mensagem_resposta[:50]}...")
                logger.info(f"üîÑ Pr√≥ximo passo definido: {resultado_processamento['proximo_passo']}")
                
                return {
                    "sucesso": True,
                    "tipo_usuario": "colaborador",
                    "acao_executada": resultado_processamento["acao"],
                    "proximo_passo": resultado_processamento["proximo_passo"],
                    "mensagem_enviada": mensagem_resposta,
                    "row_id_processado": row_id,
                    "ia_especializada_ativa": resultado_processamento["acao"] == "ativar_ia_especializada"
                }
                
            else:
                # ERRO NO PROCESSAMENTO DA RESPOSTA
                logger.warning(f"‚ö†Ô∏è Op√ß√£o n√£o reconhecida pelo colaborador: {row_id}")
                
                # Enviar mensagem de erro amig√°vel
                mensagem_erro = resultado_processamento.get("mensagem_resposta", 
                    "N√£o consegui processar sua escolha. Pode tentar novamente?")
                self.enviar_mensagem(remetente, mensagem_erro)
                
                return {
                    "sucesso": False,
                    "tipo_usuario": "colaborador", 
                    "erro": resultado_processamento.get("erro"),
                    "row_id_nao_reconhecido": row_id,
                    "mensagem_erro_enviada": mensagem_erro
                }
                
        except Exception as e:
            # TRATAMENTO DE ERRO CR√çTICO
            logger.error(f"‚ùå Erro cr√≠tico ao processar resposta de menu do colaborador: {str(e)}")
            logger.error(f"‚ùå Dados: remetente={remetente}, row_id={row_id}")
            
            # Enviar mensagem de erro t√©cnico
            mensagem_erro_tecnico = "Tive um problema t√©cnico ao processar sua escolha. Nossa equipe foi notificada."
            self.enviar_mensagem(remetente, mensagem_erro_tecnico)
            
            return {
                "sucesso": False,
                "tipo_usuario": "colaborador",
                "erro_critico": str(e),
                "row_id": row_id,
                "remetente": remetente,
                "mensagem_erro_enviada": mensagem_erro_tecnico
            }

    def processar_coleta_dados_cliente(self, remetente: str, mensagem: str, message_id: str = None) -> Dict[str, Any]:
        """
        Processa coleta de dados do cliente durante processo de fechamento
        
        Esta fun√ß√£o √© chamada quando um colaborador est√° em processo de coleta
        de dados (nome e telefone) de um cliente para fechamento de loca√ß√£o.
        
        Funcionalidades:
        - Valida dados usando GPT
        - Permite interrup√ß√µes limitadas (menu expl√≠cito, d√∫vidas com palavras interrogativas)
        - Controla etapas da coleta (nome ‚Üí telefone ‚Üí conclu√≠do)
        - Finaliza quando todos os dados s√£o coletados
        - Evita falsos positivos (nomes n√£o s√£o tratados como d√∫vidas)
        
        Args:
            remetente (str): N√∫mero do telefone do colaborador
            mensagem (str): Resposta do colaborador
            message_id (str): ID da mensagem (opcional)
            
        Returns:
            Dict: Resultado do processamento da coleta
        """
        try:
            # Marcar mensagem como lida
            if message_id:
                self.marcar_como_lida(remetente, message_id)
            
            # CAPTURA: Mensagem do colaborador durante coleta
            if self.logging_enabled and self.conversation_logger:
                try:
                    conversation_id = self.conversation_logger.get_active_conversation_id(remetente)
                    if conversation_id:
                        self.conversation_logger.add_message(conversation_id, "user", mensagem)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro na captura durante coleta: {e}")
            
            # Obter dados da coleta em andamento
            dados_coleta = self.coleta_dados_cliente[remetente]
            etapa_atual = dados_coleta["etapa"]
            
            logger.info(f"üìù Processando coleta - Etapa: {etapa_atual}, Mensagem: {mensagem[:50]}...")
            
            # ====================================================================
            # VERIFICAR INTERRUP√á√ïES (MENU OU D√öVIDAS EXPL√çCITAS)
            # ====================================================================
            # 
            # Durante a coleta, permitimos apenas interrup√ß√µes CLARAS:
            # - Menu: palavras como "menu", "op√ß√µes" com alta confian√ßa
            # - D√∫vidas: apenas perguntas EXPL√çCITAS com "?", "como", "o que", etc.
            # 
            # IMPORTANTE: "conversa_normal" N√ÉO √© mais tratada como d√∫vida!
            # Isso evita que nomes como "Andreia Robe" sejam interpretados como d√∫vidas.
            
            # Usar interpretador GPT para verificar se √© menu ou d√∫vida
            try:
                interpretacao = self.openai_service.interpretar_intencao_mensagem(mensagem, remetente)
                
                # Se solicitou menu
                if interpretacao.get("intencao") == "menu" and interpretacao.get("confianca", 0) >= 0.7:
                    logger.info(f"üìã Menu solicitado durante coleta por colaborador: {remetente}")
                    resultado_menu = self.menu_service.enviar_menu_opcoes_atendimento(remetente)
                    return {
                        "sucesso": True,
                        "interrupcao": "menu_enviado",
                        "coleta_pausada": True,
                        "etapa_atual": etapa_atual,
                        "mensagem_resposta": "Menu enviado. Digite novamente o dado solicitado para continuar a coleta."
                    }
                
                # Se fez pergunta/d√∫vida EXPL√çCITA (apenas d√∫vidas t√©cnicas claras)
                elif interpretacao.get("intencao") == "duvida_tecnica" and interpretacao.get("confianca", 0) >= 0.7:
                    # Verificar se realmente parece uma pergunta (cont√©m palavras interrogativas)
                    palavras_pergunta = ["como", "o que", "qual", "quando", "onde", "por que", "porque", "?", "ajuda", "d√∫vida", "duvida"]
                    mensagem_lower = mensagem.lower()
                    
                    # S√≥ tratar como d√∫vida se contiver palavras interrogativas claras
                    if any(palavra in mensagem_lower for palavra in palavras_pergunta):
                        logger.info(f"‚ùì D√∫vida t√©cnica expl√≠cita detectada durante coleta: {remetente}")
                        # MODULARIZADO: Ativar IA especializada temporariamente usando SessionManager
                        resultado_sessao = self.session_manager.criar_sessao_ia_especializada(
                            telefone=remetente,
                            dados_colaborador=None
                        )
                        if resultado_sessao["sucesso"]:
                            self.enviar_mensagem(remetente, "ü§ñ IA Especializada Ativada!")
                            return self.processar_duvida_colaborador(remetente, mensagem, message_id)
                        else:
                            logger.error(f"‚ùå Erro ao criar sess√£o IA durante coleta: {resultado_sessao.get('erro')}")
                    else:
                        logger.info(f"üìù D√∫vida t√©cnica detectada, mas sem palavras interrogativas - continuando coleta")
                        # Continuar com valida√ß√£o normal se n√£o for pergunta clara
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro na interpreta√ß√£o durante coleta: {e}")
                # Continuar com valida√ß√£o normal se interpretador falhar
            
            # ====================================================================
            # PROCESSAR DADOS BASEADO NA ETAPA ATUAL
            # ====================================================================
            
            if etapa_atual == "aguardando_nome":
                # Validar nome do cliente
                logger.info(f"üë§ Validando nome do cliente: {mensagem}")
                validacao = self.openai_service.validar_dado_cliente("nome", mensagem)
                
                if validacao["valido"]:
                    # Nome v√°lido - salvar e solicitar telefone
                    dados_coleta["nome"] = validacao.get("valor_corrigido", mensagem)
                    dados_coleta["etapa"] = "aguardando_telefone"
                    
                    mensagem_resposta = f"""‚úÖ Nome registrado: *{dados_coleta['nome']}*

üìû Agora informe o telefone do cliente:
(Exemplo: 11999999999 ou (11) 99999-9999)"""
                    
                    self.enviar_mensagem(remetente, mensagem_resposta)
                    
                    # CAPTURA: Resposta da IA para nome v√°lido
                    if self.logging_enabled and self.conversation_logger:
                        try:
                            conversation_id = self.conversation_logger.get_active_conversation_id(remetente)
                            if conversation_id:
                                self.conversation_logger.add_message(conversation_id, "assistant", mensagem_resposta)
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erro na captura de resposta nome: {e}")
                    
                    logger.info(f"‚úÖ Nome v√°lido coletado: {dados_coleta['nome']}")
                    return {
                        "sucesso": True,
                        "etapa_concluida": "nome",
                        "proxima_etapa": "telefone",
                        "nome_coletado": dados_coleta['nome']
                    }
                
                else:
                    # Nome inv√°lido - solicitar novamente
                    motivo = validacao.get("motivo_erro", "Nome n√£o parece v√°lido")
                    sugestao = validacao.get("sugestao", "Tente novamente")
                    
                    mensagem_erro = f"""‚ùå {motivo}

üí° {sugestao}

*Por favor, informe o nome completo do cliente:*"""
                    
                    self.enviar_mensagem(remetente, mensagem_erro)
                    
                    # CAPTURA: Mensagem de erro de nome
                    if self.logging_enabled and self.conversation_logger:
                        try:
                            conversation_id = self.conversation_logger.get_active_conversation_id(remetente)
                            if conversation_id:
                                self.conversation_logger.add_message(conversation_id, "assistant", mensagem_erro)
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erro na captura de erro nome: {e}")
                    
                    logger.warning(f"‚ùå Nome inv√°lido rejeitado: {mensagem}")
                    return {
                        "sucesso": False,
                        "erro": "nome_invalido",
                        "motivo": motivo,
                        "etapa_atual": "aguardando_nome"
                    }
            
            elif etapa_atual == "aguardando_telefone":
                # Validar telefone do cliente
                logger.info(f"üìû Validando telefone do cliente: {mensagem}")
                validacao = self.openai_service.validar_dado_cliente("telefone", mensagem)
                
                if validacao["valido"]:
                    # Telefone v√°lido - finalizar coleta
                    dados_coleta["telefone"] = validacao.get("valor_corrigido", mensagem)
                    dados_coleta["etapa"] = "concluido"
                    dados_coleta["concluido_em"] = time.time()
                    
                    mensagem_final = f"""‚úÖ *Dados do cliente coletados com sucesso!*

üë§ *Nome:* {dados_coleta['nome']}
üìû *Telefone:* {dados_coleta['telefone']}"""
                    
                    self.enviar_mensagem(remetente, mensagem_final)
                    
                    # CAPTURA: Resposta da IA para telefone v√°lido
                    if self.logging_enabled and self.conversation_logger:
                        try:
                            conversation_id = self.conversation_logger.get_active_conversation_id(remetente)
                            if conversation_id:
                                self.conversation_logger.add_message(conversation_id, "assistant", mensagem_final)
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erro na captura de resposta telefone: {e}")
                    
                    # Aguardar um momento e enviar menu de confirma√ß√£o
                    time.sleep(2)
                    
                    # Enviar menu de confirma√ß√£o personalizado
                    resultado_menu = self.menu_service.enviar_menu_confirmacao_atendimento(
                        remetente, 
                        dados_coleta['nome']
                    )
                    
                    if resultado_menu.get("sucesso"):
                        logger.info(f"‚úÖ Menu de confirma√ß√£o enviado para corretor {remetente}")
                    else:
                        logger.warning(f"‚ö†Ô∏è Falha ao enviar menu, enviando pergunta simples")
                        self.enviar_mensagem(remetente, "üöÄ Posso seguir com o Atendimento ao Cliente? (Responda Sim ou N√£o)")
                    
                    logger.info(f"üéâ Coleta conclu√≠da para colaborador {remetente}")
                    logger.info(f"üìã Dados coletados: Nome={dados_coleta['nome']}, Tel={dados_coleta['telefone']}")
                    
                    return {
                        "sucesso": True,
                        "coleta_concluida": True,
                        "dados_cliente": {
                            "nome": dados_coleta['nome'],
                            "telefone": dados_coleta['telefone']
                        },
                        "colaborador": remetente,
                        "tempo_coleta": dados_coleta['concluido_em'] - dados_coleta['iniciado_em'],
                        "menu_confirmacao_enviado": resultado_menu.get("sucesso", False)
                    }
                
                else:
                    # Telefone inv√°lido - solicitar novamente
                    motivo = validacao.get("motivo_erro", "Telefone n√£o parece v√°lido")
                    sugestao = validacao.get("sugestao", "Tente novamente")
                    
                    mensagem_erro = f"""‚ùå {motivo}

üí° {sugestao}

*Por favor, informe o telefone do cliente:*
(Exemplo: 11999999999 ou (11) 99999-9999)"""
                    
                    self.enviar_mensagem(remetente, mensagem_erro)
                    
                    logger.warning(f"‚ùå Telefone inv√°lido rejeitado: {mensagem}")
                    return {
                        "sucesso": False,
                        "erro": "telefone_invalido",
                        "motivo": motivo,
                        "etapa_atual": "aguardando_telefone"
                    }
            
            else:
                # Etapa n√£o reconhecida
                logger.error(f"‚ùå Etapa de coleta n√£o reconhecida: {etapa_atual}")
                return {
                    "sucesso": False,
                    "erro": "etapa_invalida",
                    "etapa_atual": etapa_atual
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar coleta de dados: {str(e)}")
            # Enviar mensagem de erro
            self.enviar_mensagem(remetente, "‚ùå Erro t√©cnico na coleta. Tente novamente.")
            return {
                "sucesso": False,
                "erro_critico": str(e),
                "etapa_atual": dados_coleta.get("etapa", "desconhecida")
            }

    def processar_duvida_colaborador(self, remetente: str, duvida: str, message_id: str = None) -> Dict[str, Any]:
        """
        Processa d√∫vidas de colaboradores quando a IA especializada est√° ativa
        
        Esta fun√ß√£o √© chamada quando um colaborador tem a IA especializada ativada
        e envia uma pergunta relacionada a processos de loca√ß√£o.
        
        Args:
            remetente (str): N√∫mero do telefone do colaborador
            duvida (str): Pergunta/d√∫vida do colaborador
            message_id (str): ID da mensagem (opcional)
            
        Returns:
            Dict: Resultado do processamento da d√∫vida
        """
        try:
            # Marcar mensagem como lida
            if message_id:
                self.marcar_como_lida(remetente, message_id)
            
            logger.info(f"ü§ñ Processando d√∫vida de colaborador: {remetente}")
            logger.info(f"üí≠ D√∫vida: {duvida[:100]}...")
            
            # CAPTURA: Mensagem de d√∫vida do colaborador
            if self.logging_enabled and self.conversation_logger:
                try:
                    conversation_id = self.conversation_logger.get_active_conversation_id(remetente)
                    if conversation_id:
                        self.conversation_logger.add_message(conversation_id, "user", duvida)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro na captura de d√∫vida: {e}")
            
            # Obter dados do colaborador se dispon√≠vel
            contexto_colaborador = self.sessoes_ativas[remetente].get("dados_colaborador")
            
            # Usar o OpenAI Service para processar a d√∫vida
            resultado_ia = self.openai_service.responder_duvida_locacao(
                duvida=duvida,
                contexto_colaborador=contexto_colaborador
            )
            
            if resultado_ia["sucesso"]:
                # RESPOSTA DA IA GERADA COM SUCESSO
                resposta_formatada = f"""ü§ñ *IA Especializada Responde:*

{resultado_ia['resposta']}

üìä *Categoria:* {resultado_ia['categoria'].title()}
üéØ *Confian√ßa:* {resultado_ia['confianca'].title()}"""
                
                # Adicionar sugest√µes extras se existirem
                if resultado_ia.get('sugestoes_extras') and len(resultado_ia['sugestoes_extras']) > 0:
                    resposta_formatada += "\n\nüí° *Sugest√µes adicionais:*"
                    for i, sugestao in enumerate(resultado_ia['sugestoes_extras'], 1):
                        resposta_formatada += f"\n{i}. {sugestao}"
                
                # Adicionar instru√ß√£o para continuar
                resposta_formatada += "\n\n‚ùì *Posso esclarecer mais alguma d√∫vida sobre loca√ß√£o?*"
                
                # Enviar resposta ao colaborador
                self.enviar_mensagem(remetente, resposta_formatada)
                
                # CAPTURA: Resposta da IA para d√∫vida
                if self.logging_enabled and self.conversation_logger:
                    try:
                        conversation_id = self.conversation_logger.get_active_conversation_id(remetente)
                        if conversation_id:
                            self.conversation_logger.add_message(conversation_id, "assistant", resposta_formatada)
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Erro na captura de resposta IA: {e}")
                
                # Atualizar √∫ltima intera√ß√£o na sess√£o
                if remetente in self.sessoes_ativas:
                    self.sessoes_ativas[remetente]["ultima_interacao"] = duvida
                
                # LOGS DETALHADOS
                logger.info(f"‚úÖ D√∫vida processada com sucesso - Categoria: {resultado_ia['categoria']}")
                logger.info(f"üì§ Resposta enviada para colaborador: {remetente}")
                
                return {
                    "sucesso": True,
                    "tipo_resposta": "ia_especializada",
                    "categoria_duvida": resultado_ia['categoria'],
                    "confianca": resultado_ia['confianca'],
                    "resposta_enviada": resposta_formatada,
                    "sugestoes_enviadas": len(resultado_ia.get('sugestoes_extras', [])),
                    "colaborador": resultado_ia.get('colaborador'),
                    "setor": resultado_ia.get('setor')
                }
                
            else:
                # ERRO NO PROCESSAMENTO DA IA
                logger.error(f"‚ùå Erro na IA especializada: {resultado_ia.get('erro')}")
                
                # Enviar mensagem de erro amig√°vel
                mensagem_erro = f"""ü§ñ Desculpe, tive dificuldade para processar sua d√∫vida.

{resultado_ia['resposta']}

üí° Voc√™ pode:
‚Ä¢ Reformular a pergunta de forma mais espec√≠fica
‚Ä¢ Perguntar sobre temas como: documentos, contratos, processos
‚Ä¢ Tentar novamente em alguns instantes

‚ùì Como posso ajudar voc√™?"""
                
                self.enviar_mensagem(remetente, mensagem_erro)
                
                return {
                    "sucesso": False,
                    "tipo_resposta": "ia_especializada_erro",
                    "erro": resultado_ia.get('erro'),
                    "mensagem_erro_enviada": mensagem_erro,
                    "duvida_original": duvida[:100]
                }
                
        except Exception as e:
            # ERRO CR√çTICO NO PROCESSAMENTO
            logger.error(f"‚ùå Erro cr√≠tico ao processar d√∫vida do colaborador: {str(e)}")
            
            # Enviar mensagem de erro t√©cnico
            mensagem_erro_critico = """ü§ñ Tive um problema t√©cnico ao processar sua d√∫vida.

Nossa equipe foi notificada e est√° resolvendo.

üí° Enquanto isso, voc√™ pode:
‚Ä¢ Tentar reformular a pergunta
‚Ä¢ Aguardar alguns minutos e tentar novamente
‚Ä¢ Entrar em contato com suporte t√©cnico

Pe√ßo desculpas pelo inconveniente! üôè"""
            
            self.enviar_mensagem(remetente, mensagem_erro_critico)
            
            return {
                "sucesso": False,
                "tipo_resposta": "erro_critico",
                "erro_critico": str(e),
                "mensagem_erro_enviada": mensagem_erro_critico,
                "duvida_original": duvida,
                "remetente": remetente
            }

    def processar_confirmacao_atendimento_sim(self, corretor: str, dados_cliente: Dict[str, Any]) -> Dict[str, Any]:
        """
        Processa confirma√ß√£o SIM do corretor para iniciar atendimento com cliente
        
        Args:
            corretor (str): Telefone do corretor
            dados_cliente (Dict): Dados coletados do cliente (nome, telefone)
            
        Returns:
            Dict: Resultado do processamento
        """
        try:
            # Obter dados do corretor se dispon√≠vel
            corretor_nome = "Corretor da Toca Im√≥veis"  # Padr√£o se n√£o encontrar
            
            # Tentar obter nome do corretor do banco de dados
            try:
                # TODO: Implementar busca espec√≠fica do nome do corretor
                # Por enquanto, usar nome padr√£o mais profissional
                logger.info(f"üìã Usando nome padr√£o para corretor: {corretor_nome}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel obter nome do corretor: {e}")
            
            # Converter telefone do cliente para formato para verifica√ß√£o
            telefone_cliente = dados_cliente.get('telefone', '')
            
            # Limpar telefone (remover par√™nteses, h√≠fens, espa√ßos)
            telefone_limpo = ''.join(filter(str.isdigit, telefone_cliente))
            
            logger.info(f"üîç Verificando se cliente {dados_cliente['nome']} tem WhatsApp: {telefone_limpo}")
            
            # Verificar se o cliente tem WhatsApp
            verificacao = self.verificar_numero_tem_whatsapp(telefone_limpo)
            
            if not verificacao.get("sucesso"):
                # Erro na verifica√ß√£o
                self.enviar_mensagem(corretor, f"‚ùå Erro ao verificar WhatsApp do cliente. Tente novamente.")
                return {"sucesso": False, "erro": "erro_verificacao_whatsapp"}
            
            if not verificacao.get("existe"):
                # Cliente n√£o tem WhatsApp
                mensagem_erro = f"""‚ùå *Cliente n√£o possui WhatsApp ativo*

üë§ *Nome:* {dados_cliente['nome']}
üìû *Telefone:* {telefone_cliente}

üí° *Sugest√µes:*
‚Ä¢ Confirme se o n√∫mero est√° correto
‚Ä¢ Entre em contato por outro meio
‚Ä¢ Solicite o WhatsApp atualizado do cliente"""
                
                self.enviar_mensagem(corretor, mensagem_erro)
                logger.warning(f"‚ùå Cliente sem WhatsApp: {telefone_limpo}")
                return {"sucesso": False, "erro": "cliente_sem_whatsapp"}
            
            # Cliente TEM WhatsApp - prosseguir
            logger.info(f"‚úÖ Cliente tem WhatsApp, iniciando contato: {telefone_limpo}")
            
            # Salvar dados do atendimento
            self.atendimentos_cliente[corretor] = {
                "cliente_nome": dados_cliente['nome'],
                "cliente_telefone": verificacao["numero"],  # N√∫mero formatado da API
                "corretor_nome": corretor_nome,
                "status": "aguardando_confirmacao_cliente",
                "iniciado_em": time.time()
            }
            
            # Enviar mensagem inicial para o cliente
            mensagem_cliente = f"""üè† *Ol√° {dados_cliente['nome']}!*

Sou a Bia, assistente virtual da *Toca Im√≥veis*.

O corretor *{corretor_nome}* solicitou iniciar o processo de *fechamento de loca√ß√£o* com voc√™.

Deseja prosseguir com o atendimento?"""
            
            # Enviar mensagem ao cliente
            resultado_msg = self.enviar_mensagem(verificacao["numero"], mensagem_cliente)
            
            if resultado_msg.get("sucesso"):
                # Aguardar um momento e enviar menu de confirma√ß√£o
                time.sleep(3)
                
                # Enviar menu de confirma√ß√£o ao cliente
                resultado_menu = self.menu_service.enviar_menu_confirmacao_cliente(
                    verificacao["numero"], 
                    corretor_nome
                )
                
                if resultado_menu.get("sucesso"):
                    # Confirmar ao corretor
                    confirmacao_corretor = f"""‚úÖ *Contato iniciado com sucesso!*

üë§ *Cliente:* {dados_cliente['nome']}
üìû *WhatsApp:* {telefone_cliente}

üöÄ *Mensagem enviada ao cliente aguardando resposta...*

üìã *Status:* Aguardando confirma√ß√£o do cliente"""
                    
                    self.enviar_mensagem(corretor, confirmacao_corretor)
                    
                    # Limpar dados da coleta (j√° processados)
                    if corretor in self.coleta_dados_cliente:
                        del self.coleta_dados_cliente[corretor]
                    
                    # CAPTURA: Atendimento iniciado com cliente
                    if self.logging_enabled and self.conversation_logger:
                        try:
                            conversation_id = self.conversation_logger.get_active_conversation_id(corretor)
                            if conversation_id:
                                # Atualizar dados do cliente na conversa
                                self.conversation_logger.update_participant_data(
                                    conversation_id,
                                    "client",
                                    {
                                        "name": dados_cliente['nome'],
                                        "phone": verificacao["numero"],
                                        "whatsapp_verified": True
                                    }
                                )
                                
                                # Adicionar mensagem de conclus√£o
                                self.conversation_logger.add_message(
                                    conversation_id,
                                    "system",
                                    f"Atendimento iniciado com cliente {dados_cliente['nome']} - {verificacao['numero']}"
                                )
                                
                                # Finalizar conversa de fechamento
                                self.conversation_logger.finalize_conversation(
                                    conversation_id,
                                    "client_contact_initiated"
                                )
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erro na captura de finaliza√ß√£o: {e}")
                    
                    logger.info(f"‚úÖ Atendimento iniciado: {corretor} ‚Üí {dados_cliente['nome']}")
                    
                    return {
                        "sucesso": True,
                        "acao": "atendimento_iniciado",
                        "cliente_contatado": True,
                        "menu_enviado": True,
                        "dados_atendimento": self.atendimentos_cliente[corretor]
                    }
                
                else:
                    # Falha no menu - usar mensagem simples
                    logger.warning(f"‚ö†Ô∏è Falha no menu do cliente, enviando pergunta simples")
                    self.enviar_mensagem(verificacao["numero"], 
                        "Por favor, responda: Deseja prosseguir com o atendimento?\n\n‚úÖ Digite *Sim* para continuar\n‚ùå Digite *N√£o* para cancelar")
                    
                    # Confirmar ao corretor mesmo assim
                    self.enviar_mensagem(corretor, "‚úÖ Cliente contatado! Aguardando resposta...")
                    return {"sucesso": True, "acao": "atendimento_iniciado", "menu_enviado": False}
            
            else:
                # Falha ao enviar mensagem
                self.enviar_mensagem(corretor, f"‚ùå Erro ao enviar mensagem para o cliente. Verifique o n√∫mero.")
                return {"sucesso": False, "erro": "falha_envio_mensagem"}
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar confirma√ß√£o SIM: {str(e)}")
            self.enviar_mensagem(corretor, "‚ùå Erro t√©cnico. Nossa equipe foi notificada.")
            return {"sucesso": False, "erro_critico": str(e)}

    def processar_confirmacao_atendimento_nao(self, corretor: str) -> Dict[str, Any]:
        """
        Processa confirma√ß√£o N√ÉO do corretor (cancelar atendimento)
        
        Args:
            corretor (str): Telefone do corretor
            
        Returns:
            Dict: Resultado do processamento
        """
        try:
            logger.info(f"‚ùå Corretor cancelou atendimento: {corretor}")
            
            # Limpar dados da coleta se existir
            if corretor in self.coleta_dados_cliente:
                dados_cliente = self.coleta_dados_cliente[corretor]
                logger.info(f"üóëÔ∏è Limpando dados da coleta: {dados_cliente['nome']}")
                del self.coleta_dados_cliente[corretor]
            
            # Limpar sess√£o IA se ativa
            if corretor in self.sessoes_ativas:
                logger.info(f"üóëÔ∏è Encerrando sess√£o IA do corretor: {corretor}")
                del self.sessoes_ativas[corretor]
            
            # CAPTURA: Finalizar conversa cancelada
            if self.logging_enabled and self.conversation_logger:
                try:
                    conversation_id = self.conversation_logger.get_active_conversation_id(corretor)
                    if conversation_id:
                        self.conversation_logger.add_message(
                            conversation_id, 
                            "system", 
                            "Atendimento cancelado pelo corretor"
                        )
                        self.conversation_logger.finalize_conversation(
                            conversation_id, 
                            "cancelled_by_broker"
                        )
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro na captura de cancelamento: {e}")
            
            # Log da opera√ß√£o
            logger.info(f"‚úÖ Atendimento encerrado e dados limpos para: {corretor}")
            
            return {
                "sucesso": True,
                "acao": "atendimento_cancelado",
                "dados_limpos": True,
                "sessao_encerrada": True
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar cancelamento: {str(e)}")
            return {"sucesso": False, "erro_critico": str(e)} 

    def _processar_menu_lgpd(self, from_user: str, message_text: str) -> bool:
        """
        Processa as op√ß√µes do menu LGPD
        
        Args:
            from_user (str): N√∫mero do usu√°rio
            message_text (str): Texto da mensagem
            
        Returns:
            bool: True se processou uma op√ß√£o v√°lida
        """
        
        opcoes_lgpd = {
            "1": "concordo_completo",
            "2": "mais_informacoes", 
            "3": "dados_pessoais",
            "4": "documentos",
            "5": "politica_privacidade"  # Nova op√ß√£o adicionada
        }
        
        opcao_selecionada = opcoes_lgpd.get(message_text.strip())
        
        if opcao_selecionada == "concordo_completo":
            return self._processar_concordancia_lgpd_sim(from_user)
            
        elif opcao_selecionada == "mais_informacoes":
            return self._processar_concordancia_lgpd_nao(from_user)
            
        elif opcao_selecionada == "dados_pessoais":
            self._enviar_consentimento_dados_pessoais(from_user)
            return True
            
        elif opcao_selecionada == "documentos":
            self._enviar_consentimento_documentos(from_user)
            return True
            
        elif opcao_selecionada == "politica_privacidade":
            self._enviar_politica_privacidade(from_user)
            return True
            
        return False

    def _enviar_politica_privacidade(self, from_user: str):
        """
        Envia a pol√≠tica de privacidade com link din√¢mico do Supabase
        
        Args:
            from_user (str): N√∫mero do usu√°rio
        """
        try:
            # Buscar pol√≠tica no Supabase usando a inst√¢ncia j√° criada
            if self.consentimento_service:
                mensagem_politica = self.consentimento_service.gerar_mensagem_politica_privacidade()
            else:
                # Fallback caso o servi√ßo n√£o esteja dispon√≠vel
                mensagem_politica = self._gerar_politica_fallback()
            
            # Enviar mensagem com pol√≠tica
            self.whatsapp_api.enviar_mensagem(from_user, mensagem_politica)
            
            # Log para acompanhamento
            logger.info(f"üìÑ Pol√≠tica de privacidade enviada para: {from_user}")
            
            # Aguardar 2 segundos e reenviar menu LGPD diretamente
            import time
            time.sleep(1)
            
            # Chamar diretamente o m√©todo enviar_menu_concordancia_dados
            self.menu_service.enviar_menu_concordancia_dados(from_user)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar pol√≠tica de privacidade: {e}")
            
            # Fallback: enviar link padr√£o
            mensagem_fallback = """üìÑ **Pol√≠tica de Privacidade - Toca Im√≥veis**

üîó **Link para acesso**: https://tocaimoveis.com.br/politica-privacidade

Nossa pol√≠tica detalha como tratamos seus dados pessoais conforme a LGPD.

‚¨ÖÔ∏è *Volte para continuar seu atendimento ap√≥s a leitura.*"""
            
            self.whatsapp_api.enviar_mensagem(from_user, mensagem_fallback)


    def _gerar_politica_fallback(self) -> str:
        """
        Gera pol√≠tica de privacidade completa como fallback quando ConsentimentoService n√£o est√° dispon√≠vel
        
        Returns:
            str: Pol√≠tica de privacidade completa formatada
        """
        return """üìÑ **Pol√≠tica de Privacidade para Coleta de Dados e Documentos via WhatsApp**

**1. Introdu√ß√£o**
Esta Pol√≠tica de Privacidade tem como objetivo informar como coletamos, utilizamos, armazenamos e protegemos os dados pessoais e documentos enviados por nossos clientes atrav√©s do WhatsApp, em conformidade com a Lei n¬∫ 13.709/2018 (LGPD).

**2. Dados Coletados**
Coletamos informa√ß√µes pessoais e documentos que podem incluir:
‚Ä¢ Nome completo
‚Ä¢ CPF/RG ou outros documentos de identifica√ß√£o
‚Ä¢ Endere√ßo
‚Ä¢ Dados de contato (telefone, e-mail, etc.)
‚Ä¢ Outros dados e documentos necess√°rios para a presta√ß√£o dos nossos servi√ßos

**3. Finalidade da Coleta**
Os dados e documentos coletados via WhatsApp ser√£o utilizados exclusivamente para:
‚Ä¢ Identifica√ß√£o do cliente
‚Ä¢ An√°lise de informa√ß√µes para presta√ß√£o de servi√ßos contratados
‚Ä¢ Cumprimento de obriga√ß√µes legais e regulat√≥rias
‚Ä¢ Comunica√ß√£o relacionada aos servi√ßos prestados

**4. Compartilhamento de Dados**
Seus dados poder√£o ser compartilhados apenas com terceiros necess√°rios para a execu√ß√£o do servi√ßo, sempre observando a confidencialidade e seguran√ßa das informa√ß√µes.

**5. Armazenamento e Seguran√ßa**
Seus dados e documentos ser√£o armazenados em ambiente seguro e controlado, sendo adotadas medidas t√©cnicas e administrativas para proteger suas informa√ß√µes contra acessos n√£o autorizados, situa√ß√µes acidentais ou il√≠citas de destrui√ß√£o, perda, altera√ß√£o, comunica√ß√£o ou difus√£o.

**6. Direitos dos Titulares**
Voc√™ pode, a qualquer momento, solicitar:
‚Ä¢ Confirma√ß√£o da exist√™ncia de tratamento
‚Ä¢ Acesso aos seus dados
‚Ä¢ Corre√ß√£o de dados incompletos, inexatos ou desatualizados
‚Ä¢ Anonimiza√ß√£o, bloqueio ou elimina√ß√£o de dados desnecess√°rios ou excessivos
‚Ä¢ Portabilidade dos dados a outro fornecedor de servi√ßo, mediante requisi√ß√£o expressa
‚Ä¢ Elimina√ß√£o dos dados tratados com seu consentimento, exceto nas hip√≥teses previstas em lei

**7. Contato**
Para exercer seus direitos ou em caso de d√∫vidas sobre esta Pol√≠tica, entre em contato conosco atrav√©s do WhatsApp.

**8. Atualiza√ß√µes**
Esta Pol√≠tica pode ser atualizada a qualquer momento para garantir nossa conformidade com a LGPD.

‚¨ÖÔ∏è *Volte para continuar seu atendimento ap√≥s a leitura.*"""