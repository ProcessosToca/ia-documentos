# tests/test_openai_connection.py
import os
import sys
import requests
import json
from datetime import datetime
from dotenv import load_dotenv

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Carregar vari√°veis de ambiente
load_dotenv()

def test_openai_api_key():
    """Testa se a API Key da OpenAI est√° configurada e v√°lida"""
    print("üîë TESTE 1: Verificando API Key da OpenAI")
    print("-" * 50)
    
    api_key = os.getenv('OPENAI_API_KEY')
    
    if not api_key:
        print("‚ùå ERRO: OPENAI_API_KEY n√£o encontrada no arquivo .env")
        return False
    
    print(f"‚úÖ API Key encontrada: {api_key[:10]}...{api_key[-4:]}")
    
    # Testar se a API Key √© v√°lida
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    
    try:
        response = requests.get(
            'https://api.openai.com/v1/models',
            headers=headers,
            timeout=30
        )
        
        if response.status_code == 200:
            models = response.json()
            print(f"‚úÖ API Key v√°lida! Modelos dispon√≠veis: {len(models.get('data', []))}")
            return True
        elif response.status_code == 401:
            print("‚ùå ERRO: API Key inv√°lida ou expirada")
            return False
        else:
            print(f"‚ùå ERRO: Status {response.status_code} - {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚ùå ERRO: Timeout na conex√£o com OpenAI")
        return False
    except requests.exceptions.ConnectionError:
        print("‚ùå ERRO: Falha na conex√£o com OpenAI")
        return False
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        return False

def test_openai_client():
    """Testa o cliente OpenAI do projeto"""
    print("\nü§ñ TESTE 2: Testando Cliente OpenAI do Projeto")
    print("-" * 50)
    
    try:
        from src.services.openai_service import OpenAIService
        
        # Criar inst√¢ncia do servi√ßo
        openai_service = OpenAIService()
        print("‚úÖ OpenAIService criado com sucesso")
        
        # Testar interpreta√ß√£o simples
        print("ÔøΩÔøΩ Testando interpreta√ß√£o de mensagem...")
        resultado = openai_service.interpretar_mensagem("Bom dia")
        
        if resultado:
            print(f"‚úÖ Interpreta√ß√£o bem-sucedida: {resultado.get('mensagem_resposta', 'N/A')[:50]}...")
            return True
        else:
            print("‚ùå Falha na interpreta√ß√£o")
            return False
            
    except Exception as e:
        print(f"‚ùå ERRO no teste do cliente: {e}")
        return False

def test_network_connectivity():
    """Testa conectividade de rede"""
    print("\nüåê TESTE 3: Verificando Conectividade de Rede")
    print("-" * 50)
    
    # Testar conectividade b√°sica
    try:
        response = requests.get('https://api.openai.com', timeout=10)
        print(f"‚úÖ Conectividade b√°sica: Status {response.status_code}")
    except Exception as e:
        print(f"‚ùå Falha na conectividade b√°sica: {e}")
        return False
    
    # Testar DNS
    try:
        import socket
        ip = socket.gethostbyname('api.openai.com')
        print(f"‚úÖ DNS funcionando: api.openai.com -> {ip}")
    except Exception as e:
        print(f"‚ùå Falha no DNS: {e}")
        return False
    
    # Testar porta HTTPS
    try:
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        result = sock.connect_ex(('api.openai.com', 443))
        sock.close()
        
        if result == 0:
            print("‚úÖ Porta 443 (HTTPS) acess√≠vel")
        else:
            print(f"‚ùå Porta 443 n√£o acess√≠vel: {result}")
            return False
    except Exception as e:
        print(f"‚ùå Falha no teste de porta: {e}")
        return False
    
    return True

def test_environment_variables():
    """Testa vari√°veis de ambiente"""
    print("\n‚öôÔ∏è TESTE 4: Verificando Vari√°veis de Ambiente")
    print("-" * 50)
    
    variaveis = [
        'OPENAI_API_KEY',
        'W_API_HOST',
        'W_API_INSTANCE_ID',
        'W_API_TOKEN',
        'SUPABASE_URL',
        'SUPABASE_KEY'
    ]
    
    todas_ok = True
    
    for var in variaveis:
        valor = os.getenv(var)
        if valor:
            print(f"‚úÖ {var}: {valor[:10]}..." if len(valor) > 10 else f"‚úÖ {var}: {valor}")
        else:
            print(f"‚ùå {var}: N√ÉO CONFIGURADA")
            todas_ok = False
    
    return todas_ok

def test_simple_openai_request():
    """Testa uma requisi√ß√£o simples para OpenAI"""
    print("\nüì° TESTE 5: Requisi√ß√£o Simples para OpenAI")
    print("-" * 50)
    
    api_key = os.getenv('OPENAI_API_KEY')
    
    if not api_key:
        print("‚ùå API Key n√£o dispon√≠vel")
        return False
    
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    
    data = {
        'model': 'gpt-4o-mini',
        'messages': [
            {'role': 'user', 'content': 'Diga apenas "Ol√°, teste funcionando!"'}
        ],
        'max_tokens': 50
    }
    
    try:
        print("üì§ Enviando requisi√ß√£o de teste...")
        response = requests.post(
            'https://api.openai.com/v1/chat/completions',
            headers=headers,
            json=data,
            timeout=30
        )
        
        print(f"üìä Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            content = result['choices'][0]['message']['content']
            print(f"‚úÖ Resposta recebida: {content}")
            return True
        else:
            print(f"‚ùå Erro: {response.status_code}")
            print(f"üìÑ Resposta: {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚ùå Timeout na requisi√ß√£o")
        return False
    except requests.exceptions.ConnectionError:
        print("‚ùå Erro de conex√£o")
        return False
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def main():
    """Executa todos os testes"""
    print("üîç DIAGN√ìSTICO COMPLETO - CONEX√ÉO OPENAI")
    print("=" * 60)
    print(f"üïê In√≠cio: {datetime.now().strftime('%H:%M:%S')}")
    print()
    
    resultados = {}
    
    # Executar testes
    resultados['api_key'] = test_openai_api_key()
    resultados['network'] = test_network_connectivity()
    resultados['env_vars'] = test_environment_variables()
    resultados['simple_request'] = test_simple_openai_request()
    resultados['client'] = test_openai_client()
    
    # Resumo final
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES")
    print("=" * 60)
    
    for teste, resultado in resultados.items():
        status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
        print(f"{teste.upper()}: {status}")
    
    sucessos = sum(resultados.values())
    total = len(resultados)
    
    print(f"\nÔøΩÔøΩ RESULTADO: {sucessos}/{total} testes passaram")
    
    if sucessos == total:
        print("üéâ TODOS OS TESTES PASSARAM! O problema pode ser intermitente.")
    elif sucessos >= 3:
        print("‚ö†Ô∏è MAIORIA DOS TESTES PASSOU. Verificar configura√ß√µes espec√≠ficas.")
    else:
        print("‚ùå MUITOS TESTES FALHARAM. Problema de configura√ß√£o ou conectividade.")
    
    print(f"\nÔøΩÔøΩ Fim: {datetime.now().strftime('%H:%M:%S')}")

if __name__ == "__main__":
    main()